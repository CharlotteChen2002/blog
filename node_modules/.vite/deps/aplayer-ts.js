import "./chunk-G3PMV62Z.js";

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/utils.js
var isMobile = /mobile/i.test(window.navigator.userAgent);
function secondToTime(second) {
  const add0 = (num) => num < 10 ? "0" + num : "" + num;
  const hour = Math.floor(second / 3600);
  const min = Math.floor((second - hour * 3600) / 60);
  const sec = Math.floor(second - hour * 3600 - min * 60);
  return (hour > 0 ? [hour, min, sec] : [min, sec]).map(add0).join(":");
}
function getElementViewLeft(element) {
  let actualLeft = element.offsetLeft;
  let current = element.offsetParent;
  const elementScrollLeft = document.body.scrollLeft + document.documentElement.scrollLeft;
  if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement) {
    while (current !== null) {
      actualLeft += current.offsetLeft;
      current = current.offsetParent;
    }
  } else {
    while (current !== null && current !== element) {
      actualLeft += current.offsetLeft;
      current = current.offsetParent;
    }
  }
  return actualLeft - elementScrollLeft;
}
function getElementViewTop(element, noScrollTop) {
  let actualTop = element.offsetTop;
  let current = element.offsetParent;
  let elementScrollTop = 0;
  while (current !== null) {
    actualTop += current.offsetTop;
    current = current.offsetParent;
  }
  elementScrollTop = document.body.scrollTop + document.documentElement.scrollTop;
  return noScrollTop ? actualTop : actualTop - elementScrollTop;
}
var nameMap = {
  dragStart: isMobile ? "touchstart" : "mousedown",
  dragMove: isMobile ? "touchmove" : "mousemove",
  dragEnd: isMobile ? "touchend" : "mouseup"
};
function randomOrder(length) {
  function shuffle(arr) {
    for (let i = arr.length - 1; i >= 0; i--) {
      const randomIndex = Math.floor(Math.random() * (i + 1));
      const itemAtIndex = arr[randomIndex];
      arr[randomIndex] = arr[i];
      arr[i] = itemAtIndex;
    }
    return arr;
  }
  return shuffle([...Array(length)].map(function(item, i) {
    return i;
  }));
}

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/icons.js
var orderRandom = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 32 32"><path d="M22.667 4l7 6-7 6 7 6-7 6v-4h-3.653l-3.76-3.76 2.827-2.827 2.587 2.587h2v-8h-2l-12 12h-6v-4h4.347l12-12h3.653v-4zM2.667 8h6l3.76 3.76-2.827 2.827-2.587-2.587h-4.347v-4z"></path></svg>`;
var pause = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 17 32"><path d="M14.080 4.8q2.88 0 2.88 2.048v18.24q0 2.112-2.88 2.112t-2.88-2.112v-18.24q0-2.048 2.88-2.048zM2.88 4.8q2.88 0 2.88 2.048v18.24q0 2.112-2.88 2.112t-2.88-2.112v-18.24q0-2.048 2.88-2.048z"></path></svg>`;
var volumeUp = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 28 32"><path d="M13.728 6.272v19.456q0 0.448-0.352 0.8t-0.8 0.32-0.8-0.32l-5.952-5.952h-4.672q-0.48 0-0.8-0.352t-0.352-0.8v-6.848q0-0.48 0.352-0.8t0.8-0.352h4.672l5.952-5.952q0.32-0.32 0.8-0.32t0.8 0.32 0.352 0.8zM20.576 16q0 1.344-0.768 2.528t-2.016 1.664q-0.16 0.096-0.448 0.096-0.448 0-0.8-0.32t-0.32-0.832q0-0.384 0.192-0.64t0.544-0.448 0.608-0.384 0.512-0.64 0.192-1.024-0.192-1.024-0.512-0.64-0.608-0.384-0.544-0.448-0.192-0.64q0-0.48 0.32-0.832t0.8-0.32q0.288 0 0.448 0.096 1.248 0.48 2.016 1.664t0.768 2.528zM25.152 16q0 2.72-1.536 5.056t-4 3.36q-0.256 0.096-0.448 0.096-0.48 0-0.832-0.352t-0.32-0.8q0-0.704 0.672-1.056 1.024-0.512 1.376-0.8 1.312-0.96 2.048-2.4t0.736-3.104-0.736-3.104-2.048-2.4q-0.352-0.288-1.376-0.8-0.672-0.352-0.672-1.056 0-0.448 0.32-0.8t0.8-0.352q0.224 0 0.48 0.096 2.496 1.056 4 3.36t1.536 5.056zM29.728 16q0 4.096-2.272 7.552t-6.048 5.056q-0.224 0.096-0.448 0.096-0.48 0-0.832-0.352t-0.32-0.8q0-0.64 0.704-1.056 0.128-0.064 0.384-0.192t0.416-0.192q0.8-0.448 1.44-0.896 2.208-1.632 3.456-4.064t1.216-5.152-1.216-5.152-3.456-4.064q-0.64-0.448-1.44-0.896-0.128-0.096-0.416-0.192t-0.384-0.192q-0.704-0.416-0.704-1.056 0-0.448 0.32-0.8t0.832-0.352q0.224 0 0.448 0.096 3.776 1.632 6.048 5.056t2.272 7.552z"></path></svg>`;
var volumeDown = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 28 32"><path d="M13.728 6.272v19.456q0 0.448-0.352 0.8t-0.8 0.32-0.8-0.32l-5.952-5.952h-4.672q-0.48 0-0.8-0.352t-0.352-0.8v-6.848q0-0.48 0.352-0.8t0.8-0.352h4.672l5.952-5.952q0.32-0.32 0.8-0.32t0.8 0.32 0.352 0.8zM20.576 16q0 1.344-0.768 2.528t-2.016 1.664q-0.16 0.096-0.448 0.096-0.448 0-0.8-0.32t-0.32-0.832q0-0.384 0.192-0.64t0.544-0.448 0.608-0.384 0.512-0.64 0.192-1.024-0.192-1.024-0.512-0.64-0.608-0.384-0.544-0.448-0.192-0.64q0-0.48 0.32-0.832t0.8-0.32q0.288 0 0.448 0.096 1.248 0.48 2.016 1.664t0.768 2.528z"></path></svg>`;
var skip = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 32 32"><path d="M25.468 6.947c-0.326-0.172-0.724-0.151-1.030 0.057l-6.438 4.38v-3.553c0-0.371-0.205-0.71-0.532-0.884-0.326-0.172-0.724-0.151-1.030 0.057l-12 8.164c-0.274 0.186-0.438 0.496-0.438 0.827s0.164 0.641 0.438 0.827l12 8.168c0.169 0.115 0.365 0.174 0.562 0.174 0.16 0 0.321-0.038 0.468-0.116 0.327-0.173 0.532-0.514 0.532-0.884v-3.556l6.438 4.382c0.169 0.115 0.365 0.174 0.562 0.174 0.16 0 0.321-0.038 0.468-0.116 0.327-0.173 0.532-0.514 0.532-0.884v-16.333c0-0.371-0.205-0.71-0.532-0.884z"></path></svg>`;
var volumeOff = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 28 32"><path d="M13.728 6.272v19.456q0 0.448-0.352 0.8t-0.8 0.32-0.8-0.32l-5.952-5.952h-4.672q-0.48 0-0.8-0.352t-0.352-0.8v-6.848q0-0.48 0.352-0.8t0.8-0.352h4.672l5.952-5.952q0.32-0.32 0.8-0.32t0.8 0.32 0.352 0.8z"></path></svg>`;
var loopOne = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 33 32"><path d="M9.333 9.333h13.333v4l5.333-5.333-5.333-5.333v4h-16v8h2.667v-5.333zM22.667 22.667h-13.333v-4l-5.333 5.333 5.333 5.333v-4h16v-8h-2.667v5.333zM17.333 20v-8h-1.333l-2.667 1.333v1.333h2v5.333h2z"></path></svg>`;
var menu = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 22 32"><path d="M20.8 14.4q0.704 0 1.152 0.48t0.448 1.12-0.48 1.12-1.12 0.48h-19.2q-0.64 0-1.12-0.48t-0.48-1.12 0.448-1.12 1.152-0.48h19.2zM1.6 11.2q-0.64 0-1.12-0.48t-0.48-1.12 0.448-1.12 1.152-0.48h19.2q0.704 0 1.152 0.48t0.448 1.12-0.48 1.12-1.12 0.48h-19.2zM20.8 20.8q0.704 0 1.152 0.48t0.448 1.12-0.48 1.12-1.12 0.48h-19.2q-0.64 0-1.12-0.48t-0.48-1.12 0.448-1.12 1.152-0.48h19.2z"></path></svg>`;
var play = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 16 31"><path d="M15.552 15.168q0.448 0.32 0.448 0.832 0 0.448-0.448 0.768l-13.696 8.512q-0.768 0.512-1.312 0.192t-0.544-1.28v-16.448q0-0.96 0.544-1.28t1.312 0.192z"></path></svg>`;
var right = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 32 32"><path d="M22 16l-10.105-10.6-1.895 1.987 8.211 8.613-8.211 8.612 1.895 1.988 8.211-8.613z"></path></svg>`;
var loading = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 32 32"><path d="M4 16c0-6.6 5.4-12 12-12s12 5.4 12 12c0 1.2-0.8 2-2 2s-2-0.8-2-2c0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8c1.2 0 2 0.8 2 2s-0.8 2-2 2c-6.6 0-12-5.4-12-12z"></path></svg>`;
var orderList = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 32 32"><path d="M0.622 18.334h19.54v7.55l11.052-9.412-11.052-9.413v7.549h-19.54v3.725z"></path></svg>`;
var loopAll = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 29 32"><path d="M9.333 9.333h13.333v4l5.333-5.333-5.333-5.333v4h-16v8h2.667v-5.333zM22.667 22.667h-13.333v-4l-5.333 5.333 5.333 5.333v-4h16v-8h-2.667v5.333z"></path></svg>`;
var loopNone = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 29 32"><path d="M2.667 7.027l1.707-1.693 22.293 22.293-1.693 1.707-4-4h-11.64v4l-5.333-5.333 5.333-5.333v4h8.973l-8.973-8.973v0.973h-2.667v-3.64l-4-4zM22.667 17.333h2.667v5.573l-2.667-2.667v-2.907zM22.667 6.667v-4l5.333 5.333-5.333 5.333v-4h-10.907l-2.667-2.667h13.573z"></path></svg>`;
var lrc = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 32 32"><path d="M26.667 5.333h-21.333c-0 0-0.001 0-0.001 0-1.472 0-2.666 1.194-2.666 2.666 0 0 0 0.001 0 0.001v-0 16c0 0 0 0.001 0 0.001 0 1.472 1.194 2.666 2.666 2.666 0 0 0.001 0 0.001 0h21.333c0 0 0.001 0 0.001 0 1.472 0 2.666-1.194 2.666-2.666 0-0 0-0.001 0-0.001v0-16c0-0 0-0.001 0-0.001 0-1.472-1.194-2.666-2.666-2.666-0 0-0.001 0-0.001 0h0zM5.333 16h5.333v2.667h-5.333v-2.667zM18.667 24h-13.333v-2.667h13.333v2.667zM26.667 24h-5.333v-2.667h5.333v2.667zM26.667 18.667h-13.333v-2.667h13.333v2.667z"></path></svg>`;

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/options.js
function handleAudioOption(audio) {
  if (Object.prototype.toString.call(audio) !== "[object Array]") {
    audio = [audio];
  }
  return audio.map((item) => ({
    ...item,
    name: item.name || item.title || "Audio name",
    artist: item.artist || item.author || "Audio artist",
    cover: item.cover || item.pic,
    type: item.type || "normal"
  }));
}
var options_default = (options) => {
  const defaultOption = {
    container: options.element || document.getElementsByClassName("aplayer")[0],
    mini: options.narrow || options.fixed || false,
    fixed: false,
    autoplay: false,
    mutex: true,
    lrcType: options.showlrc || options.lrc || 0,
    preload: "auto",
    theme: "#b7daff",
    loop: "all",
    order: "list",
    volume: 0.7,
    listFolded: options.fixed,
    listMaxHeight: options.listmaxheight || "250px",
    audio: options.music || [],
    storageName: "aplayer-setting"
  };
  options = Object.assign(defaultOption, options);
  options.audio = handleAudioOption(options.audio);
  if (options.audio.length <= 1 && options.loop === "one") {
    options.loop = "all";
  }
  return options;
};

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/template/art-runtime.js
var runtime = {};
runtime.$escape = function(content) {
  return xmlEscape(toString(content));
};
runtime.$each = function(data, callback) {
  if (Array.isArray(data)) {
    for (var i = 0, len = data.length; i < len; i++) {
      callback(data[i], i);
    }
  } else {
    for (var _i in data) {
      callback(data[_i], _i);
    }
  }
};
function toString(value) {
  if (typeof value !== "string") {
    if (value === void 0 || value === null) {
      value = "";
    } else if (typeof value === "function") {
      value = toString(value.call(value));
    } else {
      value = JSON.stringify(value);
    }
  }
  return value;
}
function xmlEscape(unsafe) {
  return unsafe.replace(/[<>&'"]/g, (c) => `&${{
    "<": "lt",
    ">": "gt",
    "&": "amp",
    "'": "apos",
    '"': "quot"
  }[c]};`);
}
var art_runtime_default = runtime;

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/template/list-item.js
function list_item_default($data) {
  "use strict";
  $data = $data || {};
  let $$out = "", $each = art_runtime_default.$each, audio = $data.audio, $escape2 = art_runtime_default.$escape, theme = $data.theme, index = $data.index;
  $each(audio, function($value, $index) {
    $$out += ' <li><span class="aplayer-list-cur" style="background-color: ';
    $$out += $escape2($value.theme || theme);
    $$out += '"></span> <span class="aplayer-list-index">';
    $$out += $escape2($index + index);
    $$out += '</span><span class="aplayer-list-title">';
    $$out += $escape2($value.name);
    $$out += '</span><span class="aplayer-list-author">';
    $$out += $escape2($value.artist);
    $$out += "</span></li> ";
  });
  return $$out;
}

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/template/player.js
var $escape = art_runtime_default.$escape;
var notFixedModeTplRenderers = [
  (options, includeFunction) => {
    includeFunction('<div class="aplayer-body"><div class="aplayer-pic" style="');
  },
  (options, includeFunction) => {
    includeFunction('</div></div><div class="aplayer-info"><div class="aplayer-music"><span class="aplayer-title">No audio</span> <span class="aplayer-author"></span></div><div class="aplayer-lrc"><div class="aplayer-lrc-contents" style="transform:translateY(0);-webkit-transform:translateY(0)"></div></div><div class="aplayer-controller"><div class="aplayer-bar-wrap"><div class="aplayer-bar"><div class="aplayer-loaded" style="width:0"></div><div class="aplayer-played" style="width:0;background: ');
  },
  (options, includeFunction) => {
    includeFunction('</button></div></div><div class="aplayer-list');
    if (options.listFolded) {
      includeFunction(" aplayer-list-hide");
    }
    includeFunction('" ');
    if (options.listMaxHeight) {
      includeFunction(' style="max-height: ');
      includeFunction($escape(options.listMaxHeight));
      includeFunction('" ');
    }
    includeFunction("><ol ");
    if (options.listMaxHeight) {
      includeFunction(' style="max-height: ');
      includeFunction($escape(options.listMaxHeight));
      includeFunction('" ');
    }
    includeFunction("> ");
    includeFunction(list_item_default({
      theme: options.theme,
      audio: options.audio,
      index: 1
    }));
    includeFunction(" </ol></div> ");
  }
];
var fixedModeTplRenderer = [
  (options, includeFunction) => {
    includeFunction(' <div class="aplayer-list');
    if (options.listFolded) {
      includeFunction(" aplayer-list-hide");
    }
    includeFunction('" ');
    if (options.listMaxHeight) {
      includeFunction(' style="max-height: ');
      includeFunction($escape(options.listMaxHeight));
      includeFunction('" ');
    }
    includeFunction("><ol ");
    if (options.listMaxHeight) {
      includeFunction(' style="max-height: ');
      includeFunction($escape(options.listMaxHeight));
      includeFunction('" ');
    }
    includeFunction("> ");
    includeFunction(list_item_default({
      theme: options.theme,
      audio: options.audio,
      index: 1
    }));
    includeFunction(' </ol></div><div class="aplayer-body"><div class="aplayer-pic" style="');
  },
  (options, includeFunction) => {
    includeFunction('</div></div><div class="aplayer-info" style="display:none"><div class="aplayer-music"><span class="aplayer-title">No audio</span> <span class="aplayer-author"></span></div><div class="aplayer-controller"><div class="aplayer-bar-wrap"><div class="aplayer-bar"><div class="aplayer-loaded" style="width:0"></div><div class="aplayer-played" style="width:0;background: ');
  },
  (options, includeFunction) => {
    includeFunction('</button></div></div><div class="aplayer-lrc"><div class="aplayer-lrc-contents" style="transform:translateY(0);-webkit-transform:translateY(0)"></div></div> ');
  }
];
function player_default(options, cover, tplRenderers) {
  "use strict";
  let $$out = "", include = function(content) {
    $$out += content;
    return $$out;
  };
  tplRenderers[0](options, include);
  if (cover) {
    $$out += "background-image:url(&quot;";
    $$out += $escape(cover);
    $$out += "&quot;);";
  }
  $$out += "background-color: ";
  $$out += $escape(options.theme);
  $$out += '"><div class="aplayer-button aplayer-play">';
  $$out += play;
  tplRenderers[1](options, include);
  $$out += $escape(options.theme);
  $$out += '"><span class="aplayer-thumb" style="background: ';
  $$out += $escape(options.theme);
  $$out += '"><span class="aplayer-loading-icon">';
  $$out += loading;
  $$out += '</span></span></div></div></div><div class="aplayer-time"><span class="aplayer-time-inner"><span class="aplayer-ptime">00:00</span> / <span class="aplayer-dtime">00:00</span> </span><span class="aplayer-icon aplayer-icon-back"> ';
  $$out += skip;
  $$out += ' </span><span class="aplayer-icon aplayer-icon-play"> ';
  $$out += play;
  $$out += ' </span><span class="aplayer-icon aplayer-icon-forward"> ';
  $$out += skip;
  $$out += ' </span><div class="aplayer-volume-wrap"><button type="button" class="aplayer-icon aplayer-icon-volume-down"> ';
  $$out += volumeDown;
  $$out += ' </button><div class="aplayer-volume-bar-wrap"><div class="aplayer-volume-bar"><div class="aplayer-volume" style="height:80%;background: ';
  $$out += $escape(options.theme);
  $$out += '"></div></div></div></div><button type="button" class="aplayer-icon aplayer-icon-order"> ';
  if (options.order === "list") {
    $$out += orderList;
  } else if (options.order === "random") {
    $$out += orderRandom;
  }
  $$out += ' </button> <button type="button" class="aplayer-icon aplayer-icon-loop"> ';
  if (options.loop === "one") {
    $$out += loopOne;
  } else if (options.loop === "all") {
    $$out += loopAll;
  } else if (options.loop === "none") {
    $$out += loopNone;
  }
  $$out += ' </button> <button type="button" class="aplayer-icon aplayer-icon-menu"> ';
  $$out += menu;
  $$out += ' </button> <button type="button" class="aplayer-icon aplayer-icon-lrc"> ';
  $$out += lrc;
  $$out += ' </button></div></div></div><div class="aplayer-notice"></div><div class="aplayer-miniswitcher"><button class="aplayer-icon">';
  $$out += right;
  tplRenderers[2](options, include);
  return $$out;
}

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/template.js
function Template(container, options, randomOrder2, tplRenderers) {
  let cover = "";
  if (options.audio.length) {
    if (options.order === "random") {
      cover = options.audio[randomOrder2[0]].cover;
    } else {
      cover = options.audio[0].cover;
    }
  }
  container.innerHTML = player_default(options, cover, tplRenderers);
  const selectElement = (selector) => container.querySelector(selector);
  return {
    lrc: selectElement(".aplayer-lrc-contents"),
    lrcWrap: selectElement(".aplayer-lrc"),
    ptime: selectElement(".aplayer-ptime"),
    info: selectElement(".aplayer-info"),
    time: selectElement(".aplayer-time"),
    barWrap: selectElement(".aplayer-bar-wrap"),
    button: selectElement(".aplayer-button"),
    body: selectElement(".aplayer-body"),
    list: selectElement(".aplayer-list"),
    listOl: selectElement(".aplayer-list ol"),
    listCurs: container.querySelectorAll(".aplayer-list-cur"),
    played: selectElement(".aplayer-played"),
    loaded: selectElement(".aplayer-loaded"),
    thumb: selectElement(".aplayer-thumb"),
    volume: selectElement(".aplayer-volume"),
    volumeBar: selectElement(".aplayer-volume-bar"),
    volumeButton: selectElement(".aplayer-time button"),
    volumeBarWrap: selectElement(".aplayer-volume-bar-wrap"),
    loop: selectElement(".aplayer-icon-loop"),
    order: selectElement(".aplayer-icon-order"),
    menu: selectElement(".aplayer-icon-menu"),
    pic: selectElement(".aplayer-pic"),
    title: selectElement(".aplayer-title"),
    author: selectElement(".aplayer-author"),
    dtime: selectElement(".aplayer-dtime"),
    notice: selectElement(".aplayer-notice"),
    miniSwitcher: selectElement(".aplayer-miniswitcher"),
    skipBackButton: selectElement(".aplayer-icon-back"),
    skipForwardButton: selectElement(".aplayer-icon-forward"),
    skipPlayButton: selectElement(".aplayer-icon-play"),
    lrcButton: selectElement(".aplayer-icon-lrc")
  };
}
var template_default = Template;

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/bar.js
var bar_default = (template) => {
  const elements = { ...template };
  function set(type2, percentage, direction) {
    percentage = Math.max(percentage, 0);
    percentage = Math.min(percentage, 1);
    elements[type2].style[direction] = percentage * 100 + "%";
  }
  function get(type2, direction) {
    return parseFloat(elements[type2].style[direction]) / 100;
  }
  return { get, set };
};

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/template/lrc.js
function lrc_default($data) {
  "use strict";
  $data = $data || {};
  let $$out = "", $each = art_runtime_default.$each, lyrics = $data.lyrics, $escape2 = art_runtime_default.$escape;
  $each(lyrics, function($value, $index) {
    $$out += " <p ";
    if ($index === 0) {
      $$out += ' class="aplayer-lrc-current" ';
    }
    $$out += ">";
    $$out += $escape2($value[1]);
    $$out += "</p> ";
  });
  return $$out;
}

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/lrc.js
var lrc_default2 = (options) => {
  const container = options.container;
  const player = options.player;
  const async_ = options.async;
  let parsed_ = [];
  let index_ = 0;
  let current_ = [];
  function show() {
    player.events.trigger("lrcshow");
    player.template.lrcWrap.classList.remove("aplayer-lrc-hide");
  }
  function hide() {
    player.events.trigger("lrchide");
    player.template.lrcWrap.classList.add("aplayer-lrc-hide");
  }
  function toggle() {
    if (player.template.lrcWrap.classList.contains("aplayer-lrc-hide")) {
      show();
    } else {
      hide();
    }
  }
  function update(currentTime = player.audio.currentTime) {
    if (index_ > current_.length - 1 || currentTime < current_[index_][0] || (!current_[index_ + 1] || currentTime >= current_[index_ + 1][0])) {
      for (let i = 0; i < current_.length; i++) {
        if (currentTime >= current_[i][0] && (!current_[i + 1] || currentTime < current_[i + 1][0])) {
          index_ = i;
          container.style.transform = `translateY(${-index_ * 16}px)`;
          container.style.webkitTransform = `translateY(${-index_ * 16}px)`;
          container.getElementsByClassName("aplayer-lrc-current")[0].classList.remove("aplayer-lrc-current");
          container.getElementsByTagName("p")[i].classList.add("aplayer-lrc-current");
        }
      }
    }
  }
  function switch_(index) {
    if (!parsed_[index]) {
      if (!async_) {
        if (player.list.audios[index].lrc) {
          parsed_[index] = parse(player.list.audios[index].lrc);
        } else {
          parsed_[index] = [["00:00", "Not available"]];
        }
      } else {
        parsed_[index] = [["00:00", "Loading"]];
        const xhr = new XMLHttpRequest();
        xhr.onreadystatechange = () => {
          if (index === player.list.index && xhr.readyState === 4) {
            if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
              parsed_[index] = parse(xhr.responseText);
            } else {
              player.notice(`LRC file request fails: status ${xhr.status}`);
              parsed_[index] = [["00:00", "Not available"]];
            }
            container.innerHTML = lrc_default({
              lyrics: parsed_[index]
            });
            update(0);
            current_ = parsed_[index];
          }
        };
        const apiurl = player.list.audios[index].lrc;
        xhr.open("get", apiurl, true);
        xhr.send(null);
      }
    }
    container.innerHTML = lrc_default({
      lyrics: parsed_[index]
    });
    current_ = parsed_[index];
  }
  function parse(lrc_s) {
    if (lrc_s) {
      lrc_s = lrc_s.replace(/([^\]^\n])\[/g, (match, p1) => p1 + "\n[");
      const lyric = lrc_s.split("\n");
      let lrc2 = [];
      const lyricLen = lyric.length;
      for (let i = 0; i < lyricLen; i++) {
        const lrcTimes = lyric[i].match(/\[(\d{2}):(\d{2})(\.(\d{2,3}))?]/g);
        const lrcText = lyric[i].replace(/.*\[(\d{2}):(\d{2})(\.(\d{2,3}))?]/g, "").replace(/<(\d{2}):(\d{2})(\.(\d{2,3}))?>/g, "").replace(/^\s+|\s+$/g, "");
        if (lrcTimes) {
          const timeLen = lrcTimes.length;
          for (let j = 0; j < timeLen; j++) {
            const oneTime = /\[(\d{2}):(\d{2})(\.(\d{2,3}))?]/.exec(lrcTimes[j]);
            const min2sec = oneTime[1] * 60;
            const sec2sec = parseInt(oneTime[2]);
            const msec2sec = oneTime[4] ? parseInt(oneTime[4]) / ((oneTime[4] + "").length === 2 ? 100 : 1e3) : 0;
            const lrcTime = min2sec + sec2sec + msec2sec;
            lrc2.push([lrcTime, lrcText]);
          }
        }
      }
      lrc2 = lrc2.filter((item) => item[1]);
      lrc2.sort((a, b) => a[0] - b[0]);
      return lrc2;
    } else {
      return [];
    }
  }
  function remove(index) {
    parsed_.splice(index, 1);
  }
  function clear() {
    parsed_ = [];
    container.innerHTML = "";
  }
  return {
    show,
    hide,
    toggle,
    update,
    switch: switch_,
    remove,
    clear
  };
};

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/controller.js
var controller_default = (player) => {
  initPlayButton(player);
  initPlayBar(player);
  initOrderButton(player);
  initLoopButton(player);
  initMenuButton(player);
  if (!isMobile) {
    initVolumeButton(player);
  }
  initMiniSwitcher(player);
  initSkipButton(player);
  initLrcButton(player);
};
function initPlayButton(player) {
  player.template.pic.addEventListener("click", () => {
    player.toggle();
  });
}
function initPlayBar(player) {
  const thumbMove = (e) => {
    let percentage = ((e.clientX || e.changedTouches[0].clientX) - getElementViewLeft(player.template.barWrap)) / player.template.barWrap.clientWidth;
    percentage = Math.max(percentage, 0);
    percentage = Math.min(percentage, 1);
    player.bar.set("played", percentage, "width");
    player.lrc && player.lrc.update(percentage * player.duration);
    player.template.ptime.innerHTML = secondToTime(percentage * player.duration);
  };
  const thumbUp = (e) => {
    document.removeEventListener(nameMap.dragEnd, thumbUp);
    document.removeEventListener(nameMap.dragMove, thumbMove);
    let percentage = ((e.clientX || e.changedTouches[0].clientX) - getElementViewLeft(player.template.barWrap)) / player.template.barWrap.clientWidth;
    percentage = Math.max(percentage, 0);
    percentage = Math.min(percentage, 1);
    player.bar.set("played", percentage, "width");
    player.seek(player.bar.get("played", "width") * player.duration);
    player.disableTimeupdate = false;
  };
  player.template.barWrap.addEventListener(nameMap.dragStart, () => {
    player.disableTimeupdate = true;
    document.addEventListener(nameMap.dragMove, thumbMove);
    document.addEventListener(nameMap.dragEnd, thumbUp);
  });
}
function initVolumeButton(player) {
  player.template.volumeButton.addEventListener("click", () => {
    if (player.audio.muted) {
      player.audio.muted = false;
      player.switchVolumeIcon();
      player.bar.set("volume", player.volume(), "height");
    } else {
      player.audio.muted = true;
      player.switchVolumeIcon();
      player.bar.set("volume", 0, "height");
    }
  });
  const thumbMove = (e) => {
    let percentage = 1 - ((e.clientY || e.changedTouches[0].clientY) - getElementViewTop(player.template.volumeBar, player.options.fixed)) / player.template.volumeBar.clientHeight;
    percentage = Math.max(percentage, 0);
    percentage = Math.min(percentage, 1);
    player.volume(percentage);
  };
  const thumbUp = (e) => {
    player.template.volumeBarWrap.classList.remove("aplayer-volume-bar-wrap-active");
    document.removeEventListener(nameMap.dragEnd, thumbUp);
    document.removeEventListener(nameMap.dragMove, thumbMove);
    let percentage = 1 - ((e.clientY || e.changedTouches[0].clientY) - getElementViewTop(player.template.volumeBar, player.options.fixed)) / player.template.volumeBar.clientHeight;
    percentage = Math.max(percentage, 0);
    percentage = Math.min(percentage, 1);
    player.volume(percentage);
  };
  player.template.volumeBarWrap.addEventListener(nameMap.dragStart, () => {
    player.template.volumeBarWrap.classList.add("aplayer-volume-bar-wrap-active");
    document.addEventListener(nameMap.dragMove, thumbMove);
    document.addEventListener(nameMap.dragEnd, thumbUp);
  });
}
function initOrderButton(player) {
  player.template.order.addEventListener("click", () => {
    if (player.options.order === "list") {
      player.options.order = "random";
      player.template.order.innerHTML = orderRandom;
    } else if (player.options.order === "random") {
      player.options.order = "list";
      player.template.order.innerHTML = orderList;
    }
  });
}
function initLoopButton(player) {
  player.template.loop.addEventListener("click", () => {
    if (player.list.audios.length > 1) {
      if (player.options.loop === "one") {
        player.options.loop = "none";
        player.template.loop.innerHTML = loopNone;
      } else if (player.options.loop === "none") {
        player.options.loop = "all";
        player.template.loop.innerHTML = loopAll;
      } else if (player.options.loop === "all") {
        player.options.loop = "one";
        player.template.loop.innerHTML = loopOne;
      }
    } else {
      if (player.options.loop === "one" || player.options.loop === "all") {
        player.options.loop = "none";
        player.template.loop.innerHTML = loopNone;
      } else if (player.options.loop === "none") {
        player.options.loop = "all";
        player.template.loop.innerHTML = loopAll;
      }
    }
  });
}
function initMenuButton(player) {
  player.template.menu.addEventListener("click", () => {
    player.list.toggle();
  });
}
function initMiniSwitcher(player) {
  player.template.miniSwitcher.addEventListener("click", () => {
    player.setMode(player.mode === "mini" ? "normal" : "mini");
  });
}
function initSkipButton(player) {
  player.template.skipBackButton.addEventListener("click", () => {
    player.skipBack();
  });
  player.template.skipForwardButton.addEventListener("click", () => {
    player.skipForward();
  });
  player.template.skipPlayButton.addEventListener("click", () => {
    player.toggle();
  });
}
function initLrcButton(player) {
  player.template.lrcButton.addEventListener("click", () => {
    if (player.template.lrcButton.classList.contains("aplayer-icon-lrc-inactivity")) {
      player.template.lrcButton.classList.remove("aplayer-icon-lrc-inactivity");
      player.lrc && player.lrc.show();
    } else {
      player.template.lrcButton.classList.add("aplayer-icon-lrc-inactivity");
      player.lrc && player.lrc.hide();
    }
  });
}

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/timer.js
var timer_default = (player) => {
  let lastPlayPos = 0;
  let currentPlayPos = 0;
  let bufferingDetected = false;
  let enableloadingChecker = false;
  let timer = setInterval(() => {
    if (enableloadingChecker) {
      currentPlayPos = player.audio.currentTime;
      if (!bufferingDetected && currentPlayPos === lastPlayPos && !player.audio.paused) {
        player.container.classList.add("aplayer-loading");
        bufferingDetected = true;
      }
      if (bufferingDetected && currentPlayPos > lastPlayPos && !player.audio.paused) {
        player.container.classList.remove("aplayer-loading");
        bufferingDetected = false;
      }
      lastPlayPos = currentPlayPos;
    }
  }, 100);
  return {
    enable() {
      enableloadingChecker = true;
    },
    disable() {
      enableloadingChecker = false;
    },
    destroy() {
      enableloadingChecker = false;
      timer && clearInterval(timer);
    }
  };
};

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/events.js
var playerEvents = [
  "destroy",
  "listshow",
  "listhide",
  "listadd",
  "listremove",
  "listswitch",
  "listclear",
  "noticeshow",
  "noticehide",
  "lrcshow",
  "lrchide"
];
var audioEvents = [
  "abort",
  "canplay",
  "canplaythrough",
  "durationchange",
  "emptied",
  "ended",
  "error",
  "loadeddata",
  "loadedmetadata",
  "loadstart",
  "mozaudioavailable",
  "pause",
  "play",
  "playing",
  "progress",
  "ratechange",
  "seeked",
  "seeking",
  "stalled",
  "suspend",
  "timeupdate",
  "volumechange",
  "waiting"
];
function type(name) {
  if (playerEvents.indexOf(name) !== -1) {
    return "player";
  } else if (audioEvents.indexOf(name) !== -1) {
    return "audio";
  }
}
var events_default = () => {
  const events = {};
  return {
    on: function(name, callback) {
      if (type(name) && typeof callback === "function") {
        events[name] || (events[name] = []);
        events[name].push(callback);
      }
    },
    trigger: function(name, data) {
      var _a;
      (_a = events[name]) == null ? void 0 : _a.forEach((callback) => callback(data));
    }
  };
};

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/list.js
function addToList(player, audios) {
  player.events.trigger("listadd", {
    audios
  });
  audios = handleAudioOption(audios);
  const wasSingle = !(player.list.audios.length > 1);
  const wasEmpty = player.list.audios.length === 0;
  player.template.listOl.innerHTML += list_item_default({
    theme: player.options.theme,
    audio: audios,
    index: player.list.audios.length + 1
  });
  player.list.audios = player.list.audios.concat(audios);
  if (wasSingle && player.list.audios.length > 1) {
    player.container.classList.add("aplayer-withlist");
  }
  player.randomOrder = randomOrder(player.list.audios.length);
  player.template.listCurs = player.container.querySelectorAll(".aplayer-list-cur");
  player.template.listCurs[player.list.audios.length - 1].style.backgroundColor = audios.theme || player.options.theme;
  if (wasEmpty) {
    if (player.options.order === "random") {
      player.list.switch(player.randomOrder[0]);
    } else {
      player.list.switch(0);
    }
  }
}
function removeFromList(player, index) {
  player.events.trigger("listremove", {
    index
  });
  if (player.list.audios[index]) {
    if (player.list.audios.length > 1) {
      const list = player.container.querySelectorAll(".aplayer-list li");
      list[index].remove();
      player.list.audios.splice(index, 1);
      player.lrc && player.lrc.remove(index);
      if (index === player.list.index) {
        if (player.list.audios[index]) {
          player.list.switch(index);
        } else {
          player.list.switch(index - 1);
        }
      }
      if (player.list.index > index) {
        player.list.index--;
      }
      for (let i = index; i < list.length; i++) {
        list[i].getElementsByClassName("aplayer-list-index")[0].textContent = i;
      }
      if (player.list.audios.length === 1) {
        player.container.classList.remove("aplayer-withlist");
      }
      player.template.listCurs = player.container.querySelectorAll(".aplayer-list-cur");
    } else {
      clearList(player);
    }
  }
}
function clearList(player) {
  player.events.trigger("listclear");
  player.list.index = 0;
  player.container.classList.remove("aplayer-withlist");
  player.pause();
  player.list.audios = [];
  player.lrc && player.lrc.clear();
  player.audio.src = "";
  player.template.listOl.innerHTML = "";
  player.template.pic.style.backgroundImage = "";
  player.theme(player.options.theme, player.list.index, false);
  player.template.title.innerHTML = "No audio";
  player.template.author.innerHTML = "";
  player.bar.set("loaded", 0, "width");
  player.template.dtime.innerHTML = secondToTime(0);
}
var list_default = (player) => {
  let index_ = 0;
  let audios_ = player.options.audio;
  player.template.list.addEventListener("click", (e) => {
    let target;
    if (e.target.tagName.toUpperCase() === "LI") {
      target = e.target;
    } else {
      target = e.target.parentElement;
    }
    const audioIndex = parseInt(target.getElementsByClassName("aplayer-list-index")[0].innerHTML) - 1;
    if (audioIndex !== index_) {
      switch_(audioIndex);
      player.play();
    } else {
      player.toggle();
    }
  });
  function show() {
    player.events.trigger("listshow");
    player.template.list.classList.remove("aplayer-list-hide");
    const listItemElement = getCurrentListItem();
    player.template.listOl.scrollTop = listItemElement.offsetTop;
  }
  function hide() {
    player.events.trigger("listhide");
    player.template.list.classList.add("aplayer-list-hide");
  }
  function toggle() {
    if (!player.template.list.classList.contains("aplayer-list-hide")) {
      hide();
    } else {
      show();
    }
  }
  function getCurrentListItem() {
    return player.container.querySelectorAll(".aplayer-list li")[index_];
  }
  function switch_(index) {
    player.events.trigger("listswitch", {
      index
    });
    if (typeof index !== "undefined" && audios_[index]) {
      index_ = index;
      const audio = audios_[index_];
      player.template.pic.style.backgroundImage = audio.cover ? `url('${audio.cover}')` : "";
      player.theme(audios_[index_].theme || player.options.theme, index_, false);
      player.template.title.innerHTML = audio.name;
      player.template.author.innerHTML = audio.artist ? " - " + audio.artist : "";
      const light = player.container.getElementsByClassName("aplayer-list-light")[0];
      if (light) {
        light.classList.remove("aplayer-list-light");
      }
      const listItemElement = getCurrentListItem();
      listItemElement.classList.add("aplayer-list-light");
      listItemElement.parentNode.scrollTo({
        top: listItemElement.offsetTop,
        left: 0,
        behavior: "smooth"
      });
      player.setAudio(audio);
      player.lrc && player.lrc.switch(index_);
      player.lrc && player.lrc.update(0);
      if (player.duration !== 1) {
        player.template.dtime.innerHTML = secondToTime(player.duration);
      }
    }
  }
  return {
    get index() {
      return index_;
    },
    set index(index) {
      index_ = index;
    },
    get audios() {
      return audios_;
    },
    set audios(audios) {
      audios_ = audios;
    },
    show,
    hide,
    toggle,
    switch: switch_
  };
};

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/player.js
var instances = [];
var getPlayerStruct = () => {
  const struct = {
    tplRenderers: notFixedModeTplRenderers,
    hlsHandler: () => {
    },
    events: events_default(),
    mode: "normal",
    afterInitHooks: [],
    get duration() {
      return isNaN(struct.audio.duration) ? 0 : struct.audio.duration;
    }
    // you may check other public attributes below
    // the origin code init them in the constructor (the current init function)
    // disableTimeupdate: null,
    // randomOrder: null,
    // bar: null,
    // list: null,
    // audio: null,
    // container: null,
    // lrc: null,
    // options: null,
    // template: null,
  };
  return struct;
};
var APlayer = () => {
  const player = getPlayerStruct();
  let volumeStorage;
  let paused = true;
  let hls = null;
  let timer = timer_default(player);
  let noticeTime;
  let options_;
  let container_;
  let template_;
  let list_;
  function initLrc() {
    if (options_.lrcType === 2 || options_.lrcType === true) {
      const lrcEle = container_.getElementsByClassName("aplayer-lrc-content");
      for (let i = 0; i < lrcEle.length; i++) {
        if (options_.audio[i]) {
          options_.audio[i].lrc = lrcEle[i].innerHTML;
        }
      }
    }
    if (options_.lrcType) {
      player.lrc = lrc_default2({
        container: template_.lrc,
        async: options_.lrcType === 3,
        player
      });
    }
  }
  function initClassNames() {
    container_.classList.add("aplayer");
    if (options_.lrcType && !options_.fixed) {
      container_.classList.add("aplayer-withlrc");
    }
    if (options_.audio.length > 1) {
      container_.classList.add("aplayer-withlist");
    }
    if (isMobile) {
      container_.classList.add("aplayer-mobile");
    }
    const arrow = container_.offsetWidth <= 300;
    if (arrow) {
      container_.classList.add("aplayer-arrow");
    }
    if (options_.fixed) {
      container_.classList.add("aplayer-fixed");
      template_.body.style.width = template_.body.offsetWidth - 18 + "px";
    }
    if (options_.mini) {
      player.setMode("mini");
      template_.info.style.display = "block";
    }
    if (template_.info.offsetWidth < 200) {
      template_.time.classList.add("aplayer-time-narrow");
    }
    template_.listOl.style.position = "relative";
  }
  function useVolumeStorage() {
    const storageName = options_.storageName;
    const data = JSON.parse(localStorage.getItem(storageName)) || {};
    data.volume || (data.volume = options_.volume);
    return {
      get() {
        return data.volume;
      },
      set(value) {
        data.volume = value;
        localStorage.setItem(storageName, JSON.stringify(data));
      }
    };
  }
  function initAudio() {
    player.audio = document.createElement("audio");
    player.audio.preload = options_.preload;
    audioEvents.forEach((eventName) => {
      player.audio.addEventListener(eventName, (e) => {
        player.events.trigger(eventName, e);
      });
    });
    player.volume(volumeStorage.get(), true);
  }
  function bindEvents() {
    player.on("play", () => {
      if (paused) {
        setUIPlaying();
      }
    });
    player.on("pause", () => {
      if (!paused) {
        setUIPaused();
      }
    });
    player.on("timeupdate", () => {
      if (!player.disableTimeupdate) {
        player.bar.set("played", player.audio.currentTime / player.duration, "width");
        player.lrc && player.lrc.update();
        const currentTime = secondToTime(player.audio.currentTime);
        if (template_.ptime.innerHTML !== currentTime) {
          template_.ptime.innerHTML = currentTime;
        }
      }
    });
    player.on("durationchange", () => {
      if (player.duration !== 1) {
        template_.dtime.innerHTML = secondToTime(player.duration);
      }
    });
    player.on("progress", () => {
      const percentage = player.audio.buffered.length ? player.audio.buffered.end(player.audio.buffered.length - 1) / player.duration : 0;
      player.bar.set("loaded", percentage, "width");
    });
    let skipTime;
    player.on("error", () => {
      if (list_.audios.length > 1) {
        player.notice("An audio error has occurred, player will skip forward in 2 seconds.");
        skipTime = setTimeout(() => {
          player.skipForward();
          if (!paused) {
            player.play();
          }
        }, 2e3);
      } else if (list_.audios.length === 1) {
        player.notice("An audio error has occurred.");
      }
    });
    player.events.on("listswitch", () => {
      skipTime && clearTimeout(skipTime);
    });
    player.on("ended", () => {
      if (options_.loop === "none") {
        if (options_.order === "list") {
          if (list_.index < list_.audios.length - 1) {
            list_.switch((list_.index + 1) % list_.audios.length);
            player.play();
          } else {
            list_.switch((list_.index + 1) % list_.audios.length);
            player.pause();
          }
        } else if (options_.order === "random") {
          if (player.randomOrder.indexOf(list_.index) < player.randomOrder.length - 1) {
            list_.switch(nextIndex());
            player.play();
          } else {
            list_.switch(nextIndex());
            player.pause();
          }
        }
      } else if (options_.loop === "one") {
        list_.switch(list_.index);
        player.play();
      } else if (options_.loop === "all") {
        player.skipForward();
        player.play();
      }
    });
  }
  function setUIPlaying() {
    if (paused) {
      paused = false;
      template_.button.classList.remove("aplayer-play");
      template_.button.classList.add("aplayer-pause");
      template_.button.innerHTML = "";
      setTimeout(() => {
        template_.button.innerHTML = pause;
      }, 100);
      template_.skipPlayButton.innerHTML = pause;
    }
    timer.enable();
    if (options_.mutex) {
      instances.filter((instance) => instance !== player).forEach((instance) => {
        instance.pause();
      });
    }
  }
  function setUIPaused() {
    if (!paused) {
      paused = true;
      template_.button.classList.remove("aplayer-pause");
      template_.button.classList.add("aplayer-play");
      template_.button.innerHTML = "";
      setTimeout(() => {
        template_.button.innerHTML = play;
      }, 100);
      template_.skipPlayButton.innerHTML = play;
    }
    container_.classList.remove("aplayer-loading");
    timer.disable();
  }
  function prevIndex() {
    if (list_.audios.length > 1) {
      if (options_.order === "list") {
        return list_.index - 1 < 0 ? list_.audios.length - 1 : list_.index - 1;
      } else if (options_.order === "random") {
        const index = player.randomOrder.indexOf(list_.index);
        if (index === 0) {
          return player.randomOrder[player.randomOrder.length - 1];
        } else {
          return player.randomOrder[index - 1];
        }
      }
    } else {
      return 0;
    }
  }
  function nextIndex() {
    if (list_.audios.length > 1) {
      if (options_.order === "list") {
        return (list_.index + 1) % list_.audios.length;
      } else if (options_.order === "random") {
        const index = player.randomOrder.indexOf(list_.index);
        if (index === player.randomOrder.length - 1) {
          return player.randomOrder[0];
        } else {
          return player.randomOrder[index + 1];
        }
      }
    } else {
      return 0;
    }
  }
  player.init = (options) => {
    options_ = options_default(options);
    player.options = options_;
    container_ = options_.container;
    player.container = container_;
    template_ = template_default(container_, options_, player.randomOrder, player.tplRenderers);
    player.template = template_;
    player.controller = controller_default(player);
    initClassNames();
    player.randomOrder = randomOrder(options_.audio.length);
    volumeStorage = useVolumeStorage();
    initLrc();
    player.bar = bar_default(template_);
    list_ = list_default(player);
    player.list = list_;
    initAudio();
    bindEvents();
    if (options_.order === "random") {
      list_.switch(player.randomOrder[0]);
    } else {
      list_.switch(0);
    }
    if (options_.autoplay) {
      player.play();
    }
    instances.push(player);
    player.afterInitHooks.forEach((hook) => {
      hook(player);
    });
    return player;
  };
  player.setAudio = (audio) => {
    if (hls) {
      hls.destroy();
      hls = null;
    }
    let type2 = audio.type;
    if (options_.customAudioType && options_.customAudioType[type2]) {
      if (Object.prototype.toString.call(options_.customAudioType[type2]) === "[object Function]") {
        options_.customAudioType[type2](player.audio, audio, player);
      } else {
        console.error(`Illegal customType: ${type2}`);
      }
    } else {
      if (!type2 || type2 === "auto") {
        if (/m3u8(#|\?|$)/i.exec(audio.url)) {
          type2 = "hls";
        } else {
          type2 = "normal";
        }
      }
      if (type2 === "hls") {
        hls = player.hlsHandler(audio);
      } else if (type2 === "normal") {
        player.audio.src = audio.url;
      }
    }
    player.seek(0);
    if (!paused) {
      player.audio.play();
    }
  };
  player.destroy = () => {
    instances.splice(instances.indexOf(player), 1);
    player.pause();
    container_.innerHTML = "";
    player.audio.src = "";
    timer.destroy();
    player.events.trigger("destroy");
  };
  player.setMode = (mode = "normal") => {
    player.mode = mode;
    if (mode === "mini") {
      container_.classList.add("aplayer-narrow");
    } else if (mode === "normal") {
      container_.classList.remove("aplayer-narrow");
    }
  };
  player.notice = (text, time = 2e3, opacity = 0.8) => {
    template_.notice.innerHTML = text;
    template_.notice.style.opacity = opacity;
    if (noticeTime) {
      clearTimeout(noticeTime);
    }
    player.events.trigger("noticeshow", {
      text
    });
    if (time) {
      noticeTime = setTimeout(() => {
        template_.notice.style.opacity = 0;
        player.events.trigger("noticehide");
      }, time);
    }
  };
  player.theme = (color = list_.audios[list_.index].theme || options_.theme, index = list_.index, isReset = true) => {
    if (isReset) {
      list_.audios[index] && (list_.audios[index].theme = color);
    }
    template_.listCurs[index] && (template_.listCurs[index].style.backgroundColor = color);
    if (index === list_.index) {
      template_.pic.style.backgroundColor = color;
      template_.played.style.background = color;
      template_.thumb.style.background = color;
      template_.volume.style.background = color;
    }
  };
  player.seek = (time) => {
    time = Math.max(time, 0);
    time = Math.min(time, player.duration);
    player.audio.currentTime = time;
    player.bar.set("played", time / player.duration, "width");
    template_.ptime.innerHTML = secondToTime(time);
  };
  player.play = () => {
    setUIPlaying();
    const playPromise = player.audio.play();
    if (playPromise) {
      playPromise.catch((e) => {
        console.warn(e);
        if (e.name === "NotAllowedError") {
          setUIPaused();
        }
      });
    }
  };
  player.pause = () => {
    setUIPaused();
    player.audio.pause();
  };
  player.switchVolumeIcon = () => {
    if (player.volume() >= 0.95) {
      template_.volumeButton.innerHTML = volumeUp;
    } else if (player.volume() > 0) {
      template_.volumeButton.innerHTML = volumeDown;
    } else {
      template_.volumeButton.innerHTML = volumeOff;
    }
  };
  player.volume = (percentage, nostorage) => {
    percentage = parseFloat(percentage);
    if (!isNaN(percentage)) {
      percentage = Math.max(percentage, 0);
      percentage = Math.min(percentage, 1);
      player.bar.set("volume", percentage, "height");
      if (!nostorage) {
        volumeStorage.set(percentage);
      }
      player.audio.volume = percentage;
      if (player.audio.muted) {
        player.audio.muted = false;
      }
      player.switchVolumeIcon();
    }
    return player.audio.muted ? 0 : player.audio.volume;
  };
  player.on = (name, callback) => {
    player.events.on(name, callback);
  };
  player.toggle = () => {
    if (template_.button.classList.contains("aplayer-play")) {
      player.play();
    } else if (template_.button.classList.contains("aplayer-pause")) {
      player.pause();
    }
  };
  player.skipBack = () => {
    list_.switch(prevIndex());
  };
  player.skipForward = () => {
    list_.switch(nextIndex());
  };
  player.use = (plugin) => {
    plugin(player);
    return player;
  };
  return player;
};
var player_default2 = APlayer;

// node_modules/.pnpm/aplayer-ts@2.4.5/node_modules/aplayer-ts/src/js/index.js
function APlayerFixedModePlugin(player) {
  player.tplRenderers = fixedModeTplRenderer;
  const init_ = player.init;
  player.init = (options) => {
    options.fixed = true;
    return init_(options);
  };
}
function addMusicPlugin(player) {
  player.afterInitHooks.push(() => {
    player.list.add = (audio) => {
      addToList(player, audio);
    };
  });
}
function removeMusicPlugin(player) {
  player.afterInitHooks.push(() => {
    player.list.remove = (index) => {
      removeFromList(player, index);
    };
  });
}
function clearMusicPlugin(player) {
  player.afterInitHooks.push(() => {
    player.list.clear = () => {
      clearList(player);
    };
  });
}
function APlayerHlsPlugin(player) {
  player.hlsHandler = (audio) => {
    if (Hls.isSupported()) {
      const hls = new Hls();
      hls.loadSource(audio.url);
      hls.attachMedia(player.audio);
      return hls;
    } else if (player.audio.canPlayType("application/x-mpegURL") || player.audio.canPlayType("application/vnd.apple.mpegURL")) {
      player.audio.src = audio.url;
    } else {
      player.notice("Error: HLS is not supported.");
    }
  };
}
var js_default = player_default2;
export {
  APlayerFixedModePlugin,
  APlayerHlsPlugin,
  addMusicPlugin,
  clearMusicPlugin,
  js_default as default,
  removeMusicPlugin
};
//# sourceMappingURL=aplayer-ts.js.map
