<p>本文汇总了 C 语言中一些常见的输入输出函数，来源于 stdio 库。<s>上学期老师讲的实在太少</s></p>
<h2 id="%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%87%BD%E6%95%B0" tabindex="-1">基本的输入输出函数</h2>
<ul>
<li><code>printf</code> 与 <code>scanf</code></li>
<li><code>getchar</code> 与 <code>putchar</code></li>
<li><code>gets</code> 与 <code>puts</code></li>
</ul>
<p>从标准输入输出流（<strong>stdin</strong> 和 <strong>stdout</strong>）读入读出数据。未被重定向时默认是 <strong>键盘</strong> 和 <strong>终端</strong>。</p>
<!-- more -->
<p>其中 <code>gets</code> 在读取数据时未对缓冲区大小作出限制，较不安全，不推荐使用。</p>
<p><code>printf</code> 和 <code>scanf</code> 作用是输出 / 读取格式化字符串。格式化字符串中存在可指定的变量，例如 %d 指示整型变量，对应的值写在格式化字符串之后。</p>
<p><code>getchar</code> 和 <code>putchar</code> 仅能读入 / 输入单个字符。</p>
<p><code>puts</code> 仅能输出指定字符串。</p>
<h2 id="%E5%85%B6%E4%BB%96%E5%AE%9E%E7%94%A8%E7%9A%84-i%2Fo-%E5%87%BD%E6%95%B0" tabindex="-1">其他实用的 I/O 函数</h2>
<h3 id="ungetc" tabindex="-1">ungetc</h3>
<p>声明：<code>int ungetc(int char, FILE *stream)</code></p>
<p>作用：将指定的字符丢回指定流中（例如 stdin），可以便于后面的整体读取。</p>
<h3 id="fgets" tabindex="-1">fgets</h3>
<p>声明：<code>char *fgets(char *str, int n, FILE *stream)</code></p>
<p>作用：一次从流中读取一行，存到 str 中。</p>
<p>注意：当一行数目没有达到 n 时，除了末尾的'\0'标识字符串结束，在'\0'之前还会有换行符'\n'。</p>
<h3 id="snprintf" tabindex="-1">snprintf</h3>
<p>声明：<code>int snprintf(char *str, size_t size, const char *format, ...)</code></p>
<p>作用：向字符串 str 中输入格式化字符串，例如：</p>
<p><code>snprintf(str,100,&quot;%s%s&quot;,str1,str2)</code> 起到了把 str1 和 str2 拼接后存入 str 的效果。</p>
<h3 id="freopen" tabindex="-1">freopen</h3>
<p>声明：<code>FILE *freopen(const char *filename, const char *mode, FILE *stream)</code></p>
<p>作用：输入输出流的重定向。例如：
<code>freopen(&quot;file.txt&quot;, &quot;w+&quot;, stdout)</code> 将标准输出流重定向到 file.txt。</p>
<h2 id="%E7%BB%93%E6%9D%9F%E8%BE%93%E5%85%A5%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD" tabindex="-1">结束输入条件判断</h2>
<p>见 <a href="https://blog.csdn.net/Jaster_wisdom/article/details/81161896" target="_blank" rel="noopener">此文</a>。</p>
<h2 id="%E6%80%BB%E7%BB%93" tabindex="-1">总结</h2>
<p>其实这方面内容有什么问题查查文档就行，本文是挑选了一些使用的归纳一下。在考虑处理输入输出需要怎么样的函数时，主要考虑输入输出是 <strong>字符串</strong> 还是 <strong>标准输入输出流</strong> 还是 <strong>文件流</strong>（处理标准输入输出流时也可以利用处理文件流的函数），然后依据需求选择函数即可。</p>
