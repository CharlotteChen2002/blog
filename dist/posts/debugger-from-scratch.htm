<p>最近闲来无事，捡起了两年前在学操作系统和 Rust 时候开坑的 Stanford CS 110L 课程。做了一遍发现里面的 <a href="https://reberhardt.com/cs110l/spring-2020/assignments/project-1/" target="_blank" rel="noopener">Project 1: The DEET Debugger</a>（<a href="https://github.com/reberhardt7/cs110l-spr-2020-starter-code" target="_blank" rel="noopener">代码仓库</a>）还是挺有意思的，写篇文章记录一下。</p>
<p>有点标题党了，因为课程已经提供了代码框架，大概不能算是从零开始了（&lt;ゝω・）☆</p>
<!-- more -->
<blockquote>
<p>最新版的课程主页未公开初始代码仓库，因此上面给出的是 2020 年的代码仓库。由于 <code>Cargo.toml</code> 的存在，Exercises 和 project1 都不需要修改即可食用。依赖升级/project 2 的适配可以参考 <a href="https://csdiy.wiki/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/CS110L" target="_blank" rel="noopener">CS 自学指南：CS110L</a> 及 <a href="https://github.com/fung-hwang/CS110L-2020spr" target="_blank" rel="noopener">fung-hwang/CS110L-2020spr - GitHub</a>。我的仓库由于 project2 鸽了，不公开了。</p>
</blockquote>
<p>参考：</p>
<ul>
<li><a href="https://reberhardt.com/cs110l/spring-2020/" target="_blank" rel="noopener">CS 110L: Safety in Systems Programming</a></li>
<li><a href="https://man7.org/linux/man-pages/man2/ptrace.2.html" target="_blank" rel="noopener">ptrace(2) — Linux manual page</a></li>
</ul>
<h2 id="%E8%B0%83%E8%AF%95%E5%99%A8%E4%B8%8E%E5%AD%90%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%9D%E9%81%87" tabindex="-1">调试器与子进程的初遇</h2>
<blockquote>
<p>（Milestone 1: Run the inferior）让调试器启动子进程，并使用 <code>ptrace</code> 系统调用观察和控制子进程的执行。</p>
<p>（本文中的子进程一般指代的都是被调试的进程。）</p>
</blockquote>
<p><code>ptrace</code> 系统调用可以用于跟踪指定线程的系统调用、指令执行等行为，并在触发特定事件时通过信号暂停子进程的执行。此时，调试器可以通过 <code>waitpid</code> 获取子进程的状态，并读取或修改子进程的内存、寄存器等信息，最后通过 <code>ptrace</code> 继续子进程的执行。</p>
<p>启动子进程需要的代码：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#1E754F;--shiki-dark:#4D9375"> crate</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">dwarf_data</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">DwarfData</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#59873A;--shiki-dark:#80A665"> nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">sys</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ptrace</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#59873A;--shiki-dark:#80A665"> nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">sys</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">signal</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#59873A;--shiki-dark:#80A665"> nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">sys</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">wait</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#999999;--shiki-dark:#666666">{</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">waitpid</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> WaitPidFlag</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> WaitStatus</span><span style="color:#999999;--shiki-dark:#666666">};</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#59873A;--shiki-dark:#80A665"> nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">unistd</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Pid</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#59873A;--shiki-dark:#80A665"> std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">collections</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">HashMap</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#59873A;--shiki-dark:#80A665"> std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">mem</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">size_of</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#59873A;--shiki-dark:#80A665"> std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">os</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">unix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">process</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">CommandExt</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#59873A;--shiki-dark:#80A665"> std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">process</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Child</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">use</span><span style="color:#59873A;--shiki-dark:#80A665"> std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">process</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Command</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// ......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">/// This function calls ptrace with PTRACE_TRACEME to enable debugging on a process. You should use</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">/// pre_exec with Command to call this in the child process.</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">fn</span><span style="color:#59873A;--shiki-dark:#80A665"> child_traceme</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Result</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;(),</span><span style="color:#B07D48;--shiki-dark:#BD976A"> std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#B07D48;--shiki-dark:#BD976A">io</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Error</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">traceme</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">or</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Err</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">io</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">Error</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">new</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">io</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">ErrorKind</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Other</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">        "</span><span style="color:#B56959;--shiki-dark:#C98A7D">ptrace TRACEME failed</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    )))</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">pub</span><span style="color:#AB5959;--shiki-dark:#CB7676"> struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    child</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Child</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // ignore next line for now</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    breakpoints</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> HashMap</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">usize</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Breakpoint</span><span style="color:#999999;--shiki-dark:#666666">>,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    /// Attempts to start a new inferior process. Returns Some(Inferior) if successful, or None if</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    /// an error is encountered.</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> new</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">target</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">str</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> args</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Vec</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">String</span><span style="color:#999999;--shiki-dark:#666666">>)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Option</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Inferior</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#AB5959;--shiki-dark:#CB7676"> mut</span><span style="color:#B07D48;--shiki-dark:#BD976A"> command</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Command</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">new</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">target</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> command</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> command</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">args</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        unsafe</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> command</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pre_exec</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">child_traceme</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> command</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> command</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">spawn</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">ok</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ret</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> child</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> command</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        ret</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">wait</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">None</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">map</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">|</span><span style="color:#B07D48;--shiki-dark:#BD976A">_</span><span style="color:#AB5959;--shiki-dark:#CB7676">|</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ret</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">ok</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p><code>Inferior</code> 是 GDB 对被调试的下级对象的称呼，这里可以简单理解成被调试进程。<code>Inferior::new</code> 会启动一个新的子进程，并在子进程运行前调用 <code>ptrace::traceme</code> 以启用调试。此时子进程会收到 <code>SIGTRAP</code> 而暂停执行。调试器通过 <code>waitpid</code> 获取子进程的状态，并进行错误检查。如果一切正常，说明子进程已经准备就绪了。</p>
<p>开始（继续）执行子进程的代码：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> go</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Result</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Status</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Error</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">sys</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">cont</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> None</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 开始（继续）执行，直到子进程再次中断/退出</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">wait</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">None</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>正常情况下，调试器会 <code>wait</code> 到子进程的最终退出，但如果在子进程暂停时退出调试器，子进程会变成僵尸进程。因此，调试器需要在退出时杀死子进程。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> kill</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Killing running inferior (pid </span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B56959;--shiki-dark:#C98A7D">)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">());</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // kill child</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">child</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">kill</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">unwrap</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // reap zombies</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">child</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">wait</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">unwrap</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>好，接下来我们可以调用 <code>Inferior</code> 来尝试创建并启动一个新的子进程了。</p>
<p>为此，我们介绍程序的主要结构体 <code>Debugger</code>，包含了输入处理、历史存储等模块（现在先不用关心这些细节），<code>Debugger::run</code> 则是程序的主体逻辑。</p>
<p>在 <code>Debugger::run</code> 里，我们可以在用户输入运行程序的命令后，创建一个新的 <code>Inferior</code> 对象，然后调用 <code>Inferior::go</code> 方法，等待子进程再次中断或退出，此时根据子进程的状态码进行相应的处理。</p>
<blockquote>
<p>附：这个调试器的使用方法：</p>
<p><code>deet &lt;target&gt;</code>：运行调试器，通过参数指定要调试的目标程序，此时进入调试器的 REPL 模式</p>
<p><code>&gt; run &lt;args&gt;</code>：在调试器的 REPL shell 内，运行目标程序，<code>args</code> 为目标程序的参数</p>
</blockquote>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">pub</span><span style="color:#AB5959;--shiki-dark:#CB7676"> struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Debugger</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    target</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> String</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    history_path</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> String</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    readline</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Editor</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;()>,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    inferior</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Option</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Inferior</span><span style="color:#999999;--shiki-dark:#666666">>,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    debug_data</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> DwarfData</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Debugger</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> run</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        loop</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            match</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_next_command</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">                DebuggerCommand</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">Run</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                    if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">x</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inferior</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">as_mut</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                        x</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">kill</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                    if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">inferior</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">new</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">target</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#B07D48;--shiki-dark:#BD976A">args</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">breakpoints</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">                        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inferior </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">inferior</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">                        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">go</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                        println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Error starting subprocess</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                }</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">                DebuggerCommand</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Quit</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                    if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">x</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inferior</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">as_mut</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                        x</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">kill</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                    return</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    fn</span><span style="color:#59873A;--shiki-dark:#80A665"> go</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        match</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">            .</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inferior</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">            .</span><span style="color:#59873A;--shiki-dark:#80A665">as_mut</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">            .</span><span style="color:#59873A;--shiki-dark:#80A665">unwrap</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">            .</span><span style="color:#59873A;--shiki-dark:#80A665">go</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">            .</span><span style="color:#59873A;--shiki-dark:#80A665">expect</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Error handling subprocess</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        {</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">            Status</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">Stopped</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">signal</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rip</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Child stopped (signal </span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B56959;--shiki-dark:#C98A7D">)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> signal</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">                // ignore next line for now</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">file</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">debug_data</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_line_from_addr</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">rip</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                    println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Stopped at </span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> file</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">            Status</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">Exited</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">exit_code</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Child exited (status </span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B56959;--shiki-dark:#C98A7D">)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> exit_code</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">                self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inferior </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> None</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">            Status</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">Signaled</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">signal</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Child exited due to signal </span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> signal</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">                self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inferior </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> None</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>根据 CS 110L 官网（下略），此时的预期输出:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-shell"><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">🍌</span><span style="color:#B56959;--shiki-dark:#C98A7D"> ./container</span><span style="color:#B56959;--shiki-dark:#C98A7D"> cargo</span><span style="color:#B56959;--shiki-dark:#C98A7D"> run</span><span style="color:#B56959;--shiki-dark:#C98A7D"> samples/sleepy_print</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    Finished</span><span style="color:#B56959;--shiki-dark:#C98A7D"> dev</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> [unoptimized </span><span style="color:#B56959;--shiki-dark:#C98A7D">+</span><span style="color:#B56959;--shiki-dark:#C98A7D"> debuginfo]</span><span style="color:#B56959;--shiki-dark:#C98A7D"> target</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">s</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B56959;--shiki-dark:#C98A7D"> in</span><span style="color:#B56959;--shiki-dark:#C98A7D"> 1.94s</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">     Running</span><span style="color:#999999;--shiki-dark:#666666"> `</span><span style="color:#59873A;--shiki-dark:#80A665">target/debug/deet</span><span style="color:#B56959;--shiki-dark:#C98A7D"> samples/sleepy_print</span><span style="color:#999999;--shiki-dark:#666666">`</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">deet</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> r</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">0</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">1</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">2</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">Child</span><span style="color:#B56959;--shiki-dark:#C98A7D"> exited</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (status </span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">deet</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> r</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">0</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">1</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">2</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">Child</span><span style="color:#B56959;--shiki-dark:#C98A7D"> exited</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (status </span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">deet</span><span style="color:#999999;--shiki-dark:#666666">)</span></span></code></pre>
<h2 id="%E6%AD%BB%E9%94%81%E4%B9%8B%E9%AD%82%E6%8E%A8%E5%8A%A8%E9%81%87%E9%9A%BE%E8%88%B9" tabindex="-1">死锁之魂推动遇难船</h2>
<blockquote>
<p>（Milestone 2: Stopping, resuming, and restarting the inferior）使调试器能够暂停、继续、重启子进程。</p>
</blockquote>
<p>我们希望能够在子进程死锁或其他类似情况时，能够主动暂停子进程的执行，进行一些调试工作，并且之后决定是恢复执行还是重启一个新的子进程。</p>
<p>首先在 <code>debugger_command.rs</code> 中增加 c/cont/continue 命令。由于逻辑简单，这里不再展示。</p>
<p>核心部分就是处理实现 continue 命令了：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Debugger</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> run</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        loop</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            match</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_next_command</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">                ..........</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">                DebuggerCommand</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Cont</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                    if</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inferior</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">is_none</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                        println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">There is no subprocess running now</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                        continue</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">                    self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">go</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>和 <code>Debugger::run</code> 相比，只是少了创建新的 <code>Inferior</code> 对象的步骤。</p>
<p>恢复执行/重启新的子进程是 trivial 的，实际执行仍然是调试器的 REPL shell 中的 run/continue 命令，所以这里的关键是处理好子进程的状态，对恢复执行而言，就是要判断子进程是否已存在，对重启而言，就是如果子进程已经存在，要先 kill 掉。</p>
<p>这部分逻辑已经在第一节实现。</p>
<p>此时的预期输出：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-shell"><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">🍌</span><span style="color:#B56959;--shiki-dark:#C98A7D"> ./container</span><span style="color:#B56959;--shiki-dark:#C98A7D"> cargo</span><span style="color:#B56959;--shiki-dark:#C98A7D"> run</span><span style="color:#B56959;--shiki-dark:#C98A7D"> samples/sleepy_print</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">   Compiling</span><span style="color:#B56959;--shiki-dark:#C98A7D"> deet</span><span style="color:#B56959;--shiki-dark:#C98A7D"> v0.1.0</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (/deet)</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    Finished</span><span style="color:#B56959;--shiki-dark:#C98A7D"> dev</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> [unoptimized </span><span style="color:#B56959;--shiki-dark:#C98A7D">+</span><span style="color:#B56959;--shiki-dark:#C98A7D"> debuginfo]</span><span style="color:#B56959;--shiki-dark:#C98A7D"> target</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">s</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B56959;--shiki-dark:#C98A7D"> in</span><span style="color:#B56959;--shiki-dark:#C98A7D"> 29.80s</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">     Running</span><span style="color:#999999;--shiki-dark:#666666"> `</span><span style="color:#59873A;--shiki-dark:#80A665">target/debug/deet</span><span style="color:#B56959;--shiki-dark:#C98A7D"> samples/sleepy_print</span><span style="color:#999999;--shiki-dark:#666666">`</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">deet</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> run</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 5</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">0</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">1</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">^CChild</span><span style="color:#B56959;--shiki-dark:#C98A7D"> stopped</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (signal </span><span style="color:#B56959;--shiki-dark:#C98A7D">SIGINT</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">deet</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> run</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 5</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">Killing</span><span style="color:#B56959;--shiki-dark:#C98A7D"> running</span><span style="color:#B56959;--shiki-dark:#C98A7D"> inferior</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (pid </span><span style="color:#2F798A;--shiki-dark:#4C9A91">204</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">0</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">1</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">^CChild</span><span style="color:#B56959;--shiki-dark:#C98A7D"> stopped</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (signal </span><span style="color:#B56959;--shiki-dark:#C98A7D">SIGINT</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">deet</span><span style="color:#999999;--shiki-dark:#666666">)</span></span></code></pre>
<p>打开另一个终端：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-shell"><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">🍌</span><span style="color:#B56959;--shiki-dark:#C98A7D"> docker</span><span style="color:#B56959;--shiki-dark:#C98A7D"> exec</span><span style="color:#B56959;--shiki-dark:#C98A7D"> deet</span><span style="color:#B56959;--shiki-dark:#C98A7D"> ps</span><span style="color:#B56959;--shiki-dark:#C98A7D"> aux</span><span style="color:#AB5959;--shiki-dark:#CB7676"> |</span><span style="color:#59873A;--shiki-dark:#80A665"> grep</span><span style="color:#B56959;--shiki-dark:#C98A7D"> sleepy_print</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">501</span><span style="color:#2F798A;--shiki-dark:#4C9A91">          1</span><span style="color:#2F798A;--shiki-dark:#4C9A91">  0.6</span><span style="color:#2F798A;--shiki-dark:#4C9A91">  0.2</span><span style="color:#2F798A;--shiki-dark:#4C9A91">  16292</span><span style="color:#2F798A;--shiki-dark:#4C9A91">  4448</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pts/0</span><span style="color:#B56959;--shiki-dark:#C98A7D">    Ss+</span><span style="color:#B56959;--shiki-dark:#C98A7D">  10:29</span><span style="color:#B56959;--shiki-dark:#C98A7D">   0:00</span><span style="color:#B56959;--shiki-dark:#C98A7D"> target/debug/deet</span><span style="color:#B56959;--shiki-dark:#C98A7D"> samples/sleepy_print</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">501</span><span style="color:#2F798A;--shiki-dark:#4C9A91">        210</span><span style="color:#2F798A;--shiki-dark:#4C9A91">  0.0</span><span style="color:#2F798A;--shiki-dark:#4C9A91">  0.0</span><span style="color:#2F798A;--shiki-dark:#4C9A91">   4504</span><span style="color:#2F798A;--shiki-dark:#4C9A91">   704</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pts/0</span><span style="color:#B56959;--shiki-dark:#C98A7D">    t+</span><span style="color:#B56959;--shiki-dark:#C98A7D">   10:29</span><span style="color:#B56959;--shiki-dark:#C98A7D">   0:00</span><span style="color:#B56959;--shiki-dark:#C98A7D"> samples/sleepy_print</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 5</span></span></code></pre>
<blockquote>
<p>There should only be one samples/sleepy_print process. If you see multiple, or you see a <defunct> entry, then you are not killing or reaping child processes properly.</p>
</blockquote>
<h2 id="%E9%82%A3%E4%B8%AA%E8%B0%83%E7%94%A8%E6%A0%88%E6%BB%94%E6%BB%94%E4%B8%8D%E7%BB%9D%E7%9A%84%E8%A1%A8%E8%BE%BE%E7%88%B1%E6%84%8F" tabindex="-1">那个调用栈滔滔不绝的表达爱意</h2>
<blockquote>
<p>（Milestone 3: Printing a backtrace &amp; Milestone 4: Print stopped location）打印子进程的调用栈。</p>
</blockquote>
<p>这一节，我们正式开始调试工作了。让我们首先看看在子进程暂停或退出时的一些运行信息，例如调用栈（即子进程寄在哪了）。</p>
<p>同上，省略 bt/back/backtrace 命令的增加。</p>
<p>为了得到调用栈的函数名和行号，我们需要获得调试信息。</p>
<p>为了引入框架提供的库，需要在 <code>main.rs</code> 中增加：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">mod</span><span style="color:#59873A;--shiki-dark:#80A665"> dwarf_data</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">mod</span><span style="color:#59873A;--shiki-dark:#80A665"> gimli_wrapper</span><span style="color:#999999;--shiki-dark:#666666">;</span></span></code></pre>
<p>然后把调试信息保存在 <code>Debugger</code> 结构体中。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Debugger::new 中</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> debug_data</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> match</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> DwarfData</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">from_file</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">target</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">    Ok</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">val</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#B07D48;--shiki-dark:#BD976A"> val</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">    Err</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">DwarfError</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">ErrorOpeningFile</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Could not open file </span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> target</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">process</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">exit</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">    Err</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">DwarfError</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">DwarfFormatError</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">err</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Could not debugging symbols from </span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B56959;--shiki-dark:#C98A7D">: </span><span style="color:#999999;--shiki-dark:#666666">{</span><span style="color:#B56959;--shiki-dark:#C98A7D">:?</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> target</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> err</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">process</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">exit</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>backtrace 命令中可以把调试信息传给 <code>Inferior::print_backtrace</code> 方法，打印出调用栈的函数名和行号。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Debugger</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> run</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        loop</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            match</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_next_command</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">                ..........</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">                DebuggerCommand</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">BackTrace</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                    if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">inferior</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inferior</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">as_ref</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                        if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Err</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">err</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> inferior</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">print_backtrace</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">debug_data</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                            println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Error printing backtrace: </span><span style="color:#999999;--shiki-dark:#666666">{</span><span style="color:#B56959;--shiki-dark:#C98A7D">:?</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> err</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                        println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">There is no subprocess running now</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> print_backtrace</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> debug_info</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">DwarfData</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Result</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;(),</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Error</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#AB5959;--shiki-dark:#CB7676"> mut</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rip</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">getregs</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#AB5959;--shiki-dark:#CB7676">?.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">rip </span><span style="color:#1E754F;--shiki-dark:#4D9375">as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#AB5959;--shiki-dark:#CB7676"> mut</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rbp</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">getregs</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#AB5959;--shiki-dark:#CB7676">?.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">rbp </span><span style="color:#1E754F;--shiki-dark:#4D9375">as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        loop</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            debug_info</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">print_function_and_line_from_addr</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">rip</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">            let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> function_name</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> debug_info</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">                .</span><span style="color:#59873A;--shiki-dark:#80A665">get_function_from_addr</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">rip</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">                .</span><span style="color:#59873A;--shiki-dark:#80A665">ok_or</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">Error</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">Sys</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">errno</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">Errno</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#A65E2B;--shiki-dark:#C99076">EINVAL</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            if</span><span style="color:#B07D48;--shiki-dark:#BD976A"> function_name</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ==</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">main</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                break</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            rip</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">read</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">rbp</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 8</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">AddressType</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            rbp</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">read</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rbp</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">AddressType</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">        Ok</span><span style="color:#999999;--shiki-dark:#666666">(())</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>这里的逻辑是遍历调用帧栈，伪代码（不理解的话可以先了解下 x86 的帧栈内存布局）：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-text"><span class="line"><span>instruction_ptr = %rip</span></span>
<span class="line"><span>base_ptr = %rbp</span></span>
<span class="line"><span>while true:</span></span>
<span class="line"><span>    print function/line number for instruction_ptr</span></span>
<span class="line"><span>    if function == "main":</span></span>
<span class="line"><span>        break</span></span>
<span class="line"><span>    instruction_ptr = read memory at base_ptr + 8</span></span>
<span class="line"><span>    base_ptr = read memory at base_ptr</span></span></code></pre>
<p>打印代码：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> DwarfData</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    #[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">allow</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">dead_code</span><span style="color:#999999;--shiki-dark:#666666">)]</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> print_function_and_line_from_addr</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> curr_addr</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> function</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_function_from_addr</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">curr_addr</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> line</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_line_from_addr</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">curr_addr</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        match</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">function</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> line</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            (</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">function</span><span style="color:#999999;--shiki-dark:#666666">),</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">line</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#59873A;--shiki-dark:#80A665"> println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> (</span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B56959;--shiki-dark:#C98A7D">)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> function</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> line</span><span style="color:#999999;--shiki-dark:#666666">),</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            _</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> (),</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>预期输出：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-shell"><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">👾</span><span style="color:#B56959;--shiki-dark:#C98A7D"> ./container</span><span style="color:#B56959;--shiki-dark:#C98A7D"> cargo</span><span style="color:#B56959;--shiki-dark:#C98A7D"> run</span><span style="color:#B56959;--shiki-dark:#C98A7D"> samples/segfault</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    Finished</span><span style="color:#B56959;--shiki-dark:#C98A7D"> dev</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> [unoptimized </span><span style="color:#B56959;--shiki-dark:#C98A7D">+</span><span style="color:#B56959;--shiki-dark:#C98A7D"> debuginfo]</span><span style="color:#B56959;--shiki-dark:#C98A7D"> target</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">s</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B56959;--shiki-dark:#C98A7D"> in</span><span style="color:#B56959;--shiki-dark:#C98A7D"> 2.43s</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">     Running</span><span style="color:#999999;--shiki-dark:#666666"> `</span><span style="color:#59873A;--shiki-dark:#80A665">target/debug/deet</span><span style="color:#B56959;--shiki-dark:#C98A7D"> samples/segfault</span><span style="color:#999999;--shiki-dark:#666666">`</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">deet</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> r</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">Calling</span><span style="color:#B56959;--shiki-dark:#C98A7D"> func2</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">About</span><span style="color:#B56959;--shiki-dark:#C98A7D"> to</span><span style="color:#B56959;--shiki-dark:#C98A7D"> segfault...</span><span style="color:#B56959;--shiki-dark:#C98A7D"> a=</span><span style="color:#2F798A;--shiki-dark:#4C9A91">2</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">Child</span><span style="color:#B56959;--shiki-dark:#C98A7D"> stopped</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (signal </span><span style="color:#B56959;--shiki-dark:#C98A7D">SIGSEGV</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">Stopped</span><span style="color:#B56959;--shiki-dark:#C98A7D"> at</span><span style="color:#B56959;--shiki-dark:#C98A7D"> /deet/samples/segfault.c:5</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">deet</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#59873A;--shiki-dark:#80A665"> back</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">func2</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (/deet/samples/segfault.c:5)</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">func1</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (/deet/samples/segfault.c:12)</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">main</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (/deet/samples/segfault.c:15)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">deet</span><span style="color:#999999;--shiki-dark:#666666">)</span></span></code></pre>
<h2 id="%E6%96%AD%E7%82%B9%E6%98%AF%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E9%A1%BD%E5%9B%BA%E6%9C%8B%E5%8F%8B%E7%9A%84%E6%A2%A6" tabindex="-1">断点是做了一个顽固朋友的梦</h2>
<blockquote>
<p>（Milestone 5: Setting breakpoints &amp; Milestone 6: Continuing from breakpoints &amp; Milestone 7: Setting breakpoints on symbols）设置并继续断点。</p>
</blockquote>
<p>本节已经是最后一节了，将支持调试器设置特定地址/函数名/行号的断点并恢复执行。函数名和行号可以通过调试信息转化成地址，因此这里的核心是实现特定地址断点的设置和恢复执行。</p>
<p>设置断点并恢复执行看起来好像和之前的 continue 命令差不多，但实际上要复杂一些。因为断点是通过修改子进程的内存和指令寄存器 RIP 来实现的，所以相信读完本节，你也能明白常见调试器的修改内存/寄存器等功能的原理。至此，调试器的核心功能均已经实现了，可喜可贺，可喜可贺。</p>
<p>同上，省略 b/break 命令的增加。</p>
<p>注意 <code>Debugger</code> 结构体中需要增加断点的存储，这是因为我们需要在 <code>Inferior</code> 创建前就支持断点的设置。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Debugger</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> run</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        loop</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            match</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_next_command</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">                ..........</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">                DebuggerCommand</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">BreakPoint</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">arg</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> =></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                    if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Debugger</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">parse_address</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#B07D48;--shiki-dark:#BD976A">arg</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">                        .</span><span style="color:#59873A;--shiki-dark:#80A665">or</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">parse_line_number</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#B07D48;--shiki-dark:#BD976A">arg</span><span style="color:#999999;--shiki-dark:#666666">))</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">                        .</span><span style="color:#59873A;--shiki-dark:#80A665">or</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">parse_function_name</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#B07D48;--shiki-dark:#BD976A">arg</span><span style="color:#999999;--shiki-dark:#666666">))</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    {</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">                        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">set_breakpoint</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                        println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Invalid breakpoint location: </span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> arg</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    fn</span><span style="color:#59873A;--shiki-dark:#80A665"> set_breakpoint</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> addr</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Set breakpoint </span><span style="color:#999999;--shiki-dark:#666666">{}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> at 0x</span><span style="color:#999999;--shiki-dark:#666666">{</span><span style="color:#B56959;--shiki-dark:#C98A7D">:x</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">breakpoints</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">len</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#B07D48;--shiki-dark:#BD976A"> addr</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">breakpoints</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">push</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">inferior</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inferior</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">as_mut</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Err</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">err</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> inferior</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">set_breakpoint</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                println!</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">Error setting breakpoint: </span><span style="color:#999999;--shiki-dark:#666666">{</span><span style="color:#B56959;--shiki-dark:#C98A7D">:?</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> err</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    fn</span><span style="color:#59873A;--shiki-dark:#80A665"> parse_address</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">str</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Option</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">usize</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">starts_with</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#999999;--shiki-dark:#666666">'</span><span style="color:#B56959;--shiki-dark:#C98A7D">*</span><span style="color:#999999;--shiki-dark:#666666">'</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            return</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> None</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> addr</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#AB5959;--shiki-dark:#CB7676">..</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> addr_without_0x</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> if</span><span style="color:#B07D48;--shiki-dark:#BD976A"> addr</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">to_lowercase</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">starts_with</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">0x</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">            &#x26;</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">2</span><span style="color:#AB5959;--shiki-dark:#CB7676">..</span><span style="color:#999999;--shiki-dark:#666666">]</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            addr</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        };</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">        usize</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">from_str_radix</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr_without_0x</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 16</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">ok</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    fn</span><span style="color:#59873A;--shiki-dark:#80A665"> parse_line_number</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> line</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">str</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Option</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">usize</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> line</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> line</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">parse</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">usize</span><span style="color:#999999;--shiki-dark:#666666">>()</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">ok</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">debug_data</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_addr_for_line</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">None</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> line</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    fn</span><span style="color:#59873A;--shiki-dark:#80A665"> parse_function_name</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> func</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">str</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Option</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">usize</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">debug_data</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_addr_for_function</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">None</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> func</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>可以看到，如果 <code>Inferior</code> 还不存在，直接存在 <code>breakpoints</code> 中，等 <code>Inferior</code> 创建后再设置断点。但如果 <code>Inferior</code> 已经存在，就还需要通知 <code>Inferior</code> 设置断点（因为 <code>Inferior</code> 初始化时只能传入初始化时的 <code>breakpoints</code> 断点数组）。</p>
<p>下面我们来看 <code>Inferior</code> 中怎么设置断点：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">fn</span><span style="color:#59873A;--shiki-dark:#80A665"> align_addr_to_word</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    addr</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">size_of</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">usize</span><span style="color:#999999;--shiki-dark:#666666">>()</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> isize</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">#[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">derive</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Clone</span><span style="color:#999999;--shiki-dark:#666666">)]</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Breakpoint</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    orig_byte</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> u8</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">pub</span><span style="color:#AB5959;--shiki-dark:#CB7676"> struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    child</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Child</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    breakpoints</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> HashMap</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">usize</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Breakpoint</span><span style="color:#999999;--shiki-dark:#666666">>,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // 需要更改 Inferior::new，对传入的每个断点地址设置断点</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> set_breakpoint</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> addr</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Result</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;(),</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Error</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> orig_byte</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">write_byte</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0xcc</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">breakpoints</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">insert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Breakpoint</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> orig_byte</span><span style="color:#999999;--shiki-dark:#666666"> });</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">        Ok</span><span style="color:#999999;--shiki-dark:#666666">(())</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    fn</span><span style="color:#59873A;--shiki-dark:#80A665"> write_byte</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> addr</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> val</span><span style="color:#AB5959;--shiki-dark:#CB7676">:</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> u8</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Result</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">u8</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Error</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> aligned_addr</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> align_addr_to_word</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">addr</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> byte_offset</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> addr</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -</span><span style="color:#B07D48;--shiki-dark:#BD976A"> aligned_addr</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> word</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">read</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#B07D48;--shiki-dark:#BD976A"> aligned_addr</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">AddressType</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> u64</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> orig_byte</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">word</span><span style="color:#AB5959;--shiki-dark:#CB7676"> >></span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#2F798A;--shiki-dark:#4C9A91">8</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#B07D48;--shiki-dark:#BD976A"> byte_offset</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0xff</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> masked_word</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> word</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0xff</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;&#x3C;</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#2F798A;--shiki-dark:#4C9A91">8</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#B07D48;--shiki-dark:#BD976A"> byte_offset</span><span style="color:#999999;--shiki-dark:#666666">));</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> updated_word</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> masked_word</span><span style="color:#AB5959;--shiki-dark:#CB7676"> |</span><span style="color:#999999;--shiki-dark:#666666"> ((</span><span style="color:#B07D48;--shiki-dark:#BD976A">val</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> u64</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;&#x3C;</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#2F798A;--shiki-dark:#4C9A91">8</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#B07D48;--shiki-dark:#BD976A"> byte_offset</span><span style="color:#999999;--shiki-dark:#666666">));</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">write</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">            self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">(),</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            aligned_addr</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">AddressType</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            updated_word</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *mut</span><span style="color:#59873A;--shiki-dark:#80A665"> std</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">ffi</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#B07D48;--shiki-dark:#BD976A">c_void</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        )</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">        Ok</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">orig_byte</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> u8</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>可以看到，设置断点实际就是对这个地址写入了 <code>0xcc</code>，这是 x86 的 <code>int3</code> 单字节指令，会触发 <code>SIGTRAP</code> 信号，从而暂停子进程的执行，达到设置断点的目的。同时，我们还记录了原来的字节（作为 <code>write_byte</code> 的返回值），这是为什么呢？</p>
<p>这就涉及到从断点恢复执行的机制。我们需要首先恢复断点的原始字节，然后把指令寄存器 RIP 减一（因为 <code>int3</code> 是单字节指令）以指向原始指令，这样就可以执行原始指令了。但注意，此时因为 <code>int3</code> 被还原了，所以该断点也就相应失效了，下次再执行到这里时程序不会停止。为了让断点保持有效，我们需要首先单步执行断点处原始指令，然后再次向该断点地址的内存写入 <code>0xcc</code> 以重新启用断点。接下来可以正常恢复执行了。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-rust"><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">impl</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Inferior</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    pub</span><span style="color:#1E754F;--shiki-dark:#4D9375"> fn</span><span style="color:#59873A;--shiki-dark:#80A665"> go</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;mut</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -></span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Result</span><span style="color:#999999;--shiki-dark:#666666">&#x3C;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Status</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Error</span><span style="color:#999999;--shiki-dark:#666666">></span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#AB5959;--shiki-dark:#CB7676"> mut</span><span style="color:#B07D48;--shiki-dark:#BD976A"> regs</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">getregs</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rip</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> regs</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">rip </span><span style="color:#1E754F;--shiki-dark:#4D9375">as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> usize</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        if</span><span style="color:#AB5959;--shiki-dark:#CB7676"> let</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Some</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">bp</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">breakpoints</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">get</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">rip</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">            self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">write_byte</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">rip</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bp</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">orig_byte</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            regs</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">rip </span><span style="color:#999999;--shiki-dark:#666666">-=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">            ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">setregs</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#B07D48;--shiki-dark:#BD976A"> regs</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">            ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">step</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> None</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">            self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">wait</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">None</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">            self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">write_byte</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">rip</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0xcc</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        nix</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">sys</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">ptrace</span><span style="color:#AB5959;--shiki-dark:#CB7676">::</span><span style="color:#59873A;--shiki-dark:#80A665">cont</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A65E2B;--shiki-dark:#C99076">self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">pid</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> None</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">        self</span><span style="color:#AB5959;--shiki-dark:#CB7676">.</span><span style="color:#59873A;--shiki-dark:#80A665">wait</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">None</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>完结撒花！ε=ε=(ノ≧∇≦)ノ</p>
<h2 id="%E5%90%8E%E8%AE%B0" tabindex="-1">后记</h2>
<p>没想到肝一篇逐 patch 记录的文章还是挺有意思的，虽然这篇文章的内容并不是很有深度。不过，这篇文章的内容也算是我在学习操作系统和 Rust 时的一个小小的总结吧。</p>
<blockquote>
<p>以上是 Copilot 抢答的，我只是想说逐 patch 写太累了。。。尤其是写作的时候还调整了一下部分错误处理的实现，需要逐个 patch 移植。</p>
</blockquote>
<p>每个小章节的标题 neta 了 <a href="https://bangumi.tv/subject/9781" target="_blank" rel="noopener">GOSICK -ゴシック-</a>，很浪漫的一部动画，推荐一下。</p>
<p>如果你能看到这里，向你表示感谢！</p>
