<p>本文将主要介绍人工解数独时采用的唯余法的算法实现，并给出将其改造成迭代加深算法时，解所在最低层数的确定。</p>
<h2 id="%E5%94%AF%E4%BD%99%E6%B3%95" tabindex="-1">唯余法</h2>
<blockquote>
<p>当数独谜题中的某一个宫格，因为所处的列、行及九宫格中，合计已出现过不同的 8 个数字，使得这个宫格所能填入 的数字，就只剩下那个还没出现过的数字时，我们称这个宫格有唯余解。</p>
</blockquote>
<p>可以看到，唯余法就是利用排除法得出数独某个位置可能的唯一解。但在人工用这种方法解数独时，可能会出现以下问题：</p>
<ol>
<li>只剩唯一解的数独格子难以直接观察得到。采用唯余法观察时，行，列，宫格的重复性都要考虑，<s>对人的视力提出了巨大的挑战</s>。</li>
<li>可能，而且很可能不存在能直接确定答案的数独格子。比如可能排除到最后，这个格子还剩 4 和 6 能填，确定不了具体需要填哪一个数。</li>
</ol>
<!-- more -->
<p>但以上两点在计算机算法实现时却可以比较好的解决。对于第一点，计算机可以穷举每一个格子，对于第二点，计算机可以穷举每一个可能性，这就为我们采用唯余法编写程序提供了可行性。</p>
<h2 id="%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0" tabindex="-1">算法实现</h2>
<h3 id="%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF" tabindex="-1">基本思路</h3>
<p>采用递归的思路编写程序。这里采用 DFS 遍历所有格子。递归函数 int 类型，有解返回 1，无解返回 0</p>
<p><img src="https://i.loli.net/2021/06/03/ikPVKEsLBhedqo4.jpg" alt="流程图"></p>
<p>此外，内层每次递归时也要对操作进行回溯，此处不表。</p>
<p>这里列出流程所必需的变量：</p>
<ul>
<li><code>char sudoko_solve[9][9]</code>：记录着当前的解</li>
<li><code>char num_can_input[81]</code>：记录着每个格子还可以放多少数字。0 表示无解，取最大值 127 表示格子已经被填入数字</li>
<li><code>bool mark[81][10]</code>：记录每个格子是否允许放 1 到 9 的数字。0 空出来，是为了代码简洁性。</li>
</ul>
<p>在进入正式流程之前，先要对这些数字预处理。这里略去过程。</p>
<p><code>sudoko_solve[9][9]</code> 对于已有数字为该数字，否则为 0。</p>
<p>可能会注意到，这里存在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9</mn><mo>∗</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">9*9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span></eq> 和 81 两种数据记录的方法。这是由笔者别的模块的函数写法决定的。</p>
<p>转换关系：对于坐标 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></eq>，对应的后者数字为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9</mn><mo>∗</mo><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">9*x+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></eq>。反之，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>c</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">/</mi><mn>9</mn><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mi>c</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi mathvariant="normal">%</mi><mn>9</mn></mrow><annotation encoding="application/x-tex">x = cell / 9, y = cell \% 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ce</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mord">/9</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord mathnormal">ce</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mord">%9</span></span></span></span></eq>。</p>
<h3 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0" tabindex="-1">代码实现</h3>
<p>根据上面的说明写出代码：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#59873A;--shiki-dark:#80A665"> dfs_ID</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">bool</span><span style="color:#B07D48;--shiki-dark:#BD976A"> mark</span><span style="color:#999999;--shiki-dark:#666666">[][</span><span style="color:#2F798A;--shiki-dark:#4C9A91">10</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#AB5959;--shiki-dark:#CB7676"> char*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> depth</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">depth</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 90</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        return</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//迭代加深，退出递归，目前深度待定</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> IDDFS_change</span><span style="color:#AB5959;--shiki-dark:#CB7676">*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">81</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//记录填入唯一解数字时造成的改变</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> change_num </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//对应上面的 queue，记录有多少唯一解</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> min </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 127</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> min_index</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> flag </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    do</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        min </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 127</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> flag </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 81</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ==</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//无解，回溯后退出</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">                solve_res </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> change_num </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">>=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                    dfs_ID_recall</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">mark</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                return</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            else</span><span style="color:#1E754F;--shiki-dark:#4D9375"> if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ==</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//唯一解，填入并记录</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">                flag </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">change_num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> IDDFS_change</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> change_num</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">mark</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">                        dfs_ID_fill</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">mark</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">change_num </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                        break</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                continue</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//填入唯一解后，再次进入循环</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            else</span><span style="color:#1E754F;--shiki-dark:#4D9375"> if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> min</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//记录最小值</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">                min </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">                min_index </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">flag </span><span style="color:#AB5959;--shiki-dark:#CB7676">==</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//填入了唯一解，需要再搜</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">min </span><span style="color:#AB5959;--shiki-dark:#CB7676">==</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 127</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//最小值是 127，意味着每个格子都是唯一解的，也就是找到了数独的解</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        solve_res </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 2</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        return</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    //对 min_index 进入下一层</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cell </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> min_index</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">mark</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cell</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">            struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> IDDFS_change</span><span style="color:#AB5959;--shiki-dark:#CB7676">*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nextlay</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#AB5959;--shiki-dark:#CB7676"> struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> IDDFS_change</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//记录改变</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">            dfs_ID_fill</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">mark</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cell</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> nextlay</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#59873A;--shiki-dark:#80A665">dfs_ID</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">mark</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> depth </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//填入</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                return</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">            dfs_ID_recall</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">mark</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> nextlay</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//无解，回溯</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> change_num </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">>=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//回溯填入的唯一解</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        dfs_ID_recall</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">mark</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>这里用 <code>flag</code> 记录是否有只有唯一解的格子。</p>
<p>填入和回溯函数借助了一个结构体：<code>struct IDDFS_change</code>。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> IDDFS_change</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cell_fill</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num_fill</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cell_num_can_put</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">30</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> change_num</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>这里仅仅是用于储存需要回溯的一些数据，所以不需要用类，结构体足矣。</p>
<p><code>dfs_ID_fill</code> 用于填入数字，并记录信息到 p 指针，便于回溯。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> dfs_ID_fill</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">bool</span><span style="color:#B07D48;--shiki-dark:#BD976A"> mark</span><span style="color:#999999;--shiki-dark:#666666">[][</span><span style="color:#2F798A;--shiki-dark:#4C9A91">10</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#AB5959;--shiki-dark:#CB7676"> char*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cell</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> IDDFS_change</span><span style="color:#AB5959;--shiki-dark:#CB7676">*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">cell_fill</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cell</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">num_fill</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">cell_num_can_put</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cell</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">change_num</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//记录回溯需要信息</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> x </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cell </span><span style="color:#AB5959;--shiki-dark:#CB7676">/</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> y </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cell </span><span style="color:#AB5959;--shiki-dark:#CB7676">%</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    sudoko_solve</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">x</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">y</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//数字填入该格子</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cell</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 127</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">mark</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> x </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;&#x26;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !</span><span style="color:#B07D48;--shiki-dark:#BD976A">sudoko_solve</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">x</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">k</span><span style="color:#999999;--shiki-dark:#666666">])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">change_num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> x </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">change_num</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//记录改变</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            mark</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> x </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> x </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">mark</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> y</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;&#x26;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !</span><span style="color:#B07D48;--shiki-dark:#BD976A">sudoko_solve</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">k</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">y</span><span style="color:#999999;--shiki-dark:#666666">])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">change_num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> y</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">change_num</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            mark</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> y</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> y</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i_start </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> x </span><span style="color:#AB5959;--shiki-dark:#CB7676">/</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j_start </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> y </span><span style="color:#AB5959;--shiki-dark:#CB7676">/</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dx </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dx </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dx</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dy </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dy </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dy</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">mark</span><span style="color:#999999;--shiki-dark:#666666">[(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dx</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dy</span><span style="color:#999999;--shiki-dark:#666666">)][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;&#x26;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">                !</span><span style="color:#B07D48;--shiki-dark:#BD976A">sudoko_solve</span><span style="color:#999999;--shiki-dark:#666666">[(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dx</span><span style="color:#999999;--shiki-dark:#666666">)][(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dy</span><span style="color:#999999;--shiki-dark:#666666">)])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">change_num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dx</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dy</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">change_num</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                mark</span><span style="color:#999999;--shiki-dark:#666666">[(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dx</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dy</span><span style="color:#999999;--shiki-dark:#666666">)][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dx</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j_start </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> dy</span><span style="color:#999999;--shiki-dark:#666666">)]</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p><code>dfs_ID_recall</code> 用于回溯。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> dfs_ID_recall</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">bool</span><span style="color:#B07D48;--shiki-dark:#BD976A"> mark</span><span style="color:#999999;--shiki-dark:#666666">[][</span><span style="color:#2F798A;--shiki-dark:#4C9A91">10</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#AB5959;--shiki-dark:#CB7676"> char*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> IDDFS_change</span><span style="color:#AB5959;--shiki-dark:#CB7676">*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> x </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">cell_fill</span><span style="color:#AB5959;--shiki-dark:#CB7676"> /</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> y </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">cell_fill</span><span style="color:#AB5959;--shiki-dark:#CB7676"> %</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">9</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> x </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> y</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">cell_num_can_put</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    sudoko_solve</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">x</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">y</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">change_num</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]]</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        mark</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">queue</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]][</span><span style="color:#B07D48;--shiki-dark:#BD976A">p</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">num_fill</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> false</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    delete</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> p</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h2 id="%E7%AE%97%E6%B3%95%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%8A%A0%E6%B7%B1%E6%94%B9%E8%BF%9B" tabindex="-1">算法的迭代加深改进</h2>
<p>这里可以考虑随机生成数独并利用该算法求解，记录：出现解时最低到达深度。</p>
<p>随机生成数独是指在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9</mn><mo>∗</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">9*9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span></eq> 的格子上随机放入指定数量的数字（确保不矛盾，但未必有解）</p>
<p>因此，这里需要更改放入数字数量，反复实验，实验结果如下所示：</p>
<ul>
<li>
<p>初始 17 数字：</p>
<p>21，20，20，21，24，20，21，27，21，27，21，24，24，21，19，21，20，23，28，24，25，23。</p>
</li>
<li>
<p>初始 25 数字：</p>
<p>12，10，16，9，12，9，13，6，13，7，12，11，10，8，12，10，5，3，17，7。</p>
</li>
<li>
<p>初始 30 数字：</p>
<p>3，3，5，4，5，3，3，3，3，2，8，11，6，2，10，5，4，4，2，3。</p>
</li>
</ul>
<p>可以看出，大部分情况，设置搜索深度为 24 已经能够找到目标，这样的搜索深度并不大。如果没找到目标，全部遍历即可。</p>
<p>本算法在复杂度上和朴素 dfs 都是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>c</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(c^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 级别，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>81</mn></mrow><annotation encoding="application/x-tex">n=81</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">81</span></span></span></span></eq>，但是相比朴素 dfs 大幅降低了 c，所以即便穷举所耗时间也比较优秀。</p>
<p>故可以这样将算法改进为迭代加深版本：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#59873A;--shiki-dark:#80A665"> Sudoko</span><span style="color:#999999;--shiki-dark:#666666">::</span><span style="color:#59873A;--shiki-dark:#80A665">dfs_ID</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">bool</span><span style="color:#B07D48;--shiki-dark:#BD976A"> mark</span><span style="color:#999999;--shiki-dark:#666666">[][</span><span style="color:#2F798A;--shiki-dark:#4C9A91">10</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#AB5959;--shiki-dark:#CB7676"> char*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> depth</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> bool</span><span style="color:#B07D48;--shiki-dark:#BD976A"> full_search</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">depth</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 24</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;&#x26;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">full_search</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        solve_res </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        return</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//迭代加深，退出递归。</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    ...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>增加了一个参数 <code>bool full_search</code> 用于表示当前是否需要全部搜索。至此，就完成了本次实验题关于实现迭代加深 DFS 算法的要求。</p>
