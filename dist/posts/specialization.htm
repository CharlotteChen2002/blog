<p>整理自前段时间做的一个技术分享。还是承接两个月前我写的打包体积优化的文章，最后留了一个小坑：</p>
<blockquote>
<p>ESM 时期这类项目应该是有机会有后续进展的，因为对 ESM 模块而言，静态的导入导出声明使得可以更简单的获取到模块的精确调用模型。值得期待。</p>
</blockquote>
<p>其实这里说的不太准确，ESM 的好处主要是限制了顶层变量的作用域，再配合模块导入导出声明才能达到追踪变量使用的效果。总之后面自己尝试填了一点这方面的坑，给 Rollup 提的 <a href="https://github.com/rollup/rollup/pull/5443" target="_blank" rel="noopener">PR</a> 也是在干这件事，这个链接里有 Rollup 的 maintainer（<a href="https://github.com/lukastaegert" target="_blank" rel="noopener">@lukastaegert</a>）整理的这个 PR 的作用和合并过程（其实还挺折磨的，因为一开始没太看懂 Rollup 的算法思想）。</p>
<p>所以本篇文章补一下这个 PR 实现背后的部分理论基础，主要是部分求值，和在 JavaScript 打包体积优化的应用。关于 Tree-Shaking 算法细节，和算法中比较重要的，变量的状态的格（代数结构里的格）表示，可能会另开一篇（写在毕设里了，不过未必会整理到博客上），也可能咕咕咕（</p>
<!-- more -->
<blockquote>
<p>POPL '86 <a href="https://dl.acm.org/doi/abs/10.1145/512644.512652" target="_blank" rel="noopener">“Compilers and staging transformations”</a>:</p>
<p>计算通常可以分为多个阶段，这些阶段通过执行频率或数据可用性来区分。预计算 和 循环不变代码外提(Frequency Reduction) 涉及在程序的不同阶段完成计算，以便尽早完成计算（因此后续步骤需要更少的时间）并且尽可能不要重复计算（以减少总体时间）。</p>
</blockquote>
<p>TL;DR: 编译期和运行时只是程序执行的不同的阶段，编译的过程也是一个<strong>部分执行</strong>程序的过程。熟知 Linux 上编译安装某个程序的常见步骤：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-shell"><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">./configure</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">make</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">make</span><span style="color:#B56959;--shiki-dark:#C98A7D"> install</span></span></code></pre>
<p><code>./configure</code> 命令用于编译前配置一些选项，例如是否包含某个功能。考虑一段简单的矩阵乘法例子：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-c"><span class="line"><span style="color:#999999;--shiki-dark:#666666">#</span><span style="color:#1E754F;--shiki-dark:#4D9375">include</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">stdio.h</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">></span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">#</span><span style="color:#1E754F;--shiki-dark:#4D9375">define</span><span style="color:#59873A;--shiki-dark:#80A665"> ROWS</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">#</span><span style="color:#1E754F;--shiki-dark:#4D9375">define</span><span style="color:#59873A;--shiki-dark:#80A665"> COLS</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> matrix_multiply</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> A</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ROWS</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">COLS</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> B</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">COLS</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ROWS</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> result</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ROWS</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ROWS</span><span style="color:#999999;--shiki-dark:#666666">])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> ROWS</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> ROWS</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            result</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> COLS</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                result</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> A</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">k</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#B07D48;--shiki-dark:#BD976A"> B</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">k</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>如果 <code>./configure</code> 配置了 <code>ROWS</code> 和 <code>COLS</code> 为常量，那么 <code>make</code> 时编译器就可以进行更针对的优化，例如当 <code>ROWS</code> 和 <code>COLS</code> 较小时循环展开。在这个例子中，<code>ROWS</code> 和 <code>COLS</code> 不仅是<strong>配置</strong>，也可以看成程序的<strong>输入</strong>，只是这部分输入在编译期已经确定，或者说被特化。</p>
<h2 id="%E9%83%A8%E5%88%86%E6%B1%82%E5%80%BC%E5%99%A8" tabindex="-1">部分求值器</h2>
<p>这一部分说明通过程序编译期输入进行程序优化的潜力。</p>
<p>我们把程序的输入分为两部分，一部分是运行时才知道的输入，一部分是编译期就可以知道的输入。</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext mathvariant="monospace">INPUT</mtext><mo>=</mo><msub><mtext mathvariant="monospace">INPUT</mtext><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>i</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo>∪</mo><msub><mtext mathvariant="monospace">INPUT</mtext><mrow><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\verb|INPUT| = \verb|INPUT|_{compiletime} \cup \verb|INPUT|_{runtime}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6111em;"></span><span class="mord text"><span class="mord texttt">INPUT</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8972em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">INPUT</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7611em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">INPUT</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></eqn></section><p>存在一个部分求值器，接收一个程序和该程序的编译期输入，据此输出另一个优化后的程序。</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mtext mathvariant="monospace">program</mtext><mo separator="true">,</mo><msub><mtext mathvariant="monospace">INPUT</mtext><mrow><mi>c</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>i</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mtext mathvariant="monospace">program_optimized</mtext></mrow><annotation encoding="application/x-tex">P(\verb|program|, \verb|INPUT|_{compiletime}) = \verb|program_optimized|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">program</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord text"><span class="mord texttt">INPUT</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">co</span><span class="mord mathnormal mtight">m</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.2222em;"></span><span class="mord text"><span class="mord texttt">program_optimized</span></span></span></span></span></span></eqn></section><p>优化前后程序功能等价。</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext mathvariant="monospace">program</mtext><mo stretchy="false">(</mo><msub><mtext mathvariant="monospace">INPUT</mtext><mrow><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mtext mathvariant="monospace">program_optimized</mtext><mo stretchy="false">(</mo><msub><mtext mathvariant="monospace">INPUT</mtext><mrow><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\verb|program|(\verb|INPUT|_{runtime}) = \verb|program_optimized|(\verb|INPUT|_{runtime})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord texttt">program</span></span><span class="mopen">(</span><span class="mord"><span class="mord text"><span class="mord texttt">INPUT</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord texttt">program_optimized</span></span><span class="mopen">(</span><span class="mord"><span class="mord text"><span class="mord texttt">INPUT</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section><p>假设我们现在有一个语言的解释器 Interpreter 和它要执行的一段脚本 script。解释器本身也是一个程序，它接收脚本 script 和 执行脚本时用户的输入 这两个输入。这两个输入处在不同的阶段，我们把前者看成编译期输入：</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mtext mathvariant="monospace">Interpreter</mtext><mo separator="true">,</mo><mtext mathvariant="monospace">script</mtext><mo stretchy="false">)</mo><mo>=</mo><mtext mathvariant="monospace">program_optimized</mtext></mrow><annotation encoding="application/x-tex">P(\verb|Interpreter|, \verb|script|) = \verb|program_optimized|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord text"><span class="mord texttt">Interpreter</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord texttt">script</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.2222em;"></span><span class="mord text"><span class="mord texttt">program_optimized</span></span></span></span></span></span></eqn></section><p>当然需要保证对运行时输入表现相同：</p>
<section><eqn><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext mathvariant="monospace">Interpreter</mtext><mo stretchy="false">(</mo><msub><mtext mathvariant="monospace">INPUT</mtext><mrow><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mtext mathvariant="monospace">program_optimized</mtext><mo stretchy="false">(</mo><msub><mtext mathvariant="monospace">INPUT</mtext><mrow><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\verb|Interpreter|(\verb|INPUT|_{runtime}) = \verb|program_optimized|(\verb|INPUT|_{runtime})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord texttt">Interpreter</span></span><span class="mopen">(</span><span class="mord"><span class="mord text"><span class="mord texttt">INPUT</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord texttt">program_optimized</span></span><span class="mopen">(</span><span class="mord"><span class="mord text"><span class="mord texttt">INPUT</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">im</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></eqn></section><p>等式左边是用解释器执行这段脚本，接收执行脚本时用户输入。它等价于等式右边的另一个优化后的程序接收执行脚本时用户的输入。相当于我们得到了一个脚本编译后的程序。也就是 <strong>只需要实现一个语言的解释器，它的编译器自然存在</strong>。然而通用的效果良好的部分求值器难以实现，因此还没有实用的“给定一个语言的解释器，得到一个该语言的<strong>高效</strong>的编译器”的方法。但换言之，只要我们将尽可能多的计算提前到编译期，就能提高运行时的性能。如现在模版引擎常常将模版解析部分放在编译期。</p>
<p>这里未必需要严格的「编译期」，「运行时」的概念，只要能将 <strong>计算的阶段（Staging）</strong> 提前即可。例如 SSG (Static Site Generation) 和 SSR (Server Side Render) 都是提前渲染了页面，但是 SSG 是在「编译期」，SSR 是服务器实时完成。</p>
<h3 id="%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8" tabindex="-1">实际应用</h3>
<p>什么东东能接收一个程序和（一段时间）输入数据，输出一个更高效的程序？</p>
<ul>
<li>JIT 编译器</li>
<li>PGO</li>
</ul>
<p>PGO 听上去不是很部分求值，但其实挺 staging 的。</p>
<h2 id="tree-shaking-%E7%AE%97%E6%B3%95" tabindex="-1">Tree-Shaking 算法</h2>
<p>第三方库，如 jQuery，lodash，vue-router 等，可以完全被放到运行时加载（比如以 CDN 形式提供）。然而，随着 ES6 模块机制的提出和打包工具的 Tree-Shaking 优化算法的发展，现在一般会有一个打包的步骤以减小体积。打包也是一种形式的编译，Tree-Shaking 就是在编译期特化（只保留使用到的函数/类/对象）代码，伪代码：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> included</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> Set</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> needTreeShakingPass</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 迭代直到算法收敛</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 算法收敛意味着一轮迭代中，所有结点的状态都不变，且没有新的结点被包含</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">While</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">changed</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    needTreeShakingPass</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> false</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    markTopLevelSideEffectNodesIncluded</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">graph</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> included</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> node</span><span style="color:#AB5959;--shiki-dark:#CB7676"> of</span><span style="color:#B07D48;--shiki-dark:#BD976A"> included</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 更新结点状态。例如 if (a) {} 中，如果 a 在上一轮迭代中被标记为有修改，那就要置这里的条件值为 UNKNOWN</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> isNodeStateUpdated</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> UpdateNodeState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">node</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 结点状态更新可能会带来新的结点被包含。</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 若 if (a) {} 中 a 的值从 false 变为 UNKNOWN，就要新包含 块语句 结点</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> isNewNodeIncluded</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> MarkNodeUsedByCurrentNodeIncluded</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">node</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> included</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">isNodeStateUpdated</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#B07D48;--shiki-dark:#BD976A"> isNewNodeIncluded</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            needTreeShakingPass</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Tree-Shaking 实现还有一些细节，例如每个表达式的值都会在判断副作用阶段就被首先尽可能的求出；表达式的值只有已知到未知的变化路径，最多变化一次，以保证算法收敛等，这里不再展开。</p>
<h2 id="%E7%89%B9%E5%8C%96%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%87%BD%E6%95%B0" tabindex="-1">特化第三方库函数</h2>
<p>然而，Tree-Shaking 算法只能精确到是否包含<strong>某个函数/类/对象</strong>，无法做到对内部属性的精确分析。一部分原因也是因为 JavaScript 中这些都是一等对象（first-class objects），由于 JavaScript 的动态特性很难追踪它们的所有使用。所以 UglifyJS 等工具一般也没办法对类的方法重命名，或者去除对象的某个没有被使用到的属性。但有的时候在包含某个函数/类/对象的粒度并不足够我们使用。例如，Vue 很多第三方组件库都提供了丰富的配置选项，但一个 Vue 组件是整体作为一个对象，因此我们打包时只能选择包含或不包含某个组件，无法部分包含：</p>
<p><img src="/images/naive-pagination.png" alt="naive-pagination" width="1600" height="1249"></p>
<p>上图是 Naive UI 的<a href="https://www.naiveui.com/zh-CN/os-theme/components/pagination" target="_blank" rel="noopener">分页组件</a>，即使我们只需要使用「简单分页」这一功能，也不得不去包含一大堆无用的渲染代码。如果某个第三方函数/类/对象的体积成为了打包产物体积的瓶颈，有以下几种可能的解决方法</p>
<h3 id="%E6%8B%86%E5%88%86%E5%8D%95%E7%8B%AC%E7%9A%84%E5%87%BD%E6%95%B0%2F%E5%8A%9F%E8%83%BD%E5%AF%B9%E8%B1%A1" tabindex="-1">拆分单独的函数/功能对象</h3>
<p>暴露不同的函数好理解（直接不同功能提供不同函数），也可以选择暴露不同的对象以方便组合 e.g.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">export</span><span style="color:#B07D48;--shiki-dark:#BD976A"> PluginA</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">export</span><span style="color:#B07D48;--shiki-dark:#BD976A"> PluginB</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">export</span><span style="color:#59873A;--shiki-dark:#80A665"> SomeLibraryFunction</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // ...</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> self</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // 实际执行</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    run</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // ...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    installPlugin</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">plugin</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // ...</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> self</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> self</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 用户调用</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">SomeLibraryFunction</span><span style="color:#999999;--shiki-dark:#666666">().</span><span style="color:#59873A;--shiki-dark:#80A665">installPlugin</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">PluginA</span><span style="color:#999999;--shiki-dark:#666666">).</span><span style="color:#59873A;--shiki-dark:#80A665">run</span><span style="color:#999999;--shiki-dark:#666666">();</span></span></code></pre>
<p>此时 PluginB 因为没有被使用，自然不会被包含。</p>
<h3 id="%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90" tabindex="-1">打包工具静态分析</h3>
<p>除了本文一开始提到的 PR，Rollup 当前还有另一个 <a href="https://github.com/rollup/rollup/pull/5420" target="_blank" rel="noopener">PR</a> 在推进，是关于消除对象的未使用属性的（2018 年被<a href="https://github.com/rollup/rollup/issues/2201" target="_blank" rel="noopener">提出</a>，一直未得到解决）。</p>
<h3 id="babel-%E6%8F%92%E4%BB%B6" tabindex="-1">Babel 插件</h3>
<p>对 Vue 组件而言，暂时没有一个通用的静态分析工具自动替换所有已知调用参数（需要处理默认参数等问题）。然而，对于体积瓶颈的组件选项我们可以简单使用 babel 转译，来帮助打包时消除无用分支（其实也可以自己维护一份删除了不需要分支的组件，但这样可能不利于后续功能需求变更）。最后可以达到的效果是作为 Rollup/其他打包工具的插件提供，可以在配置文件中手动指定已知属性的值：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-typescript"><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 让插件把组件 setup 函数内的 props.disabled 和 render 函数内的 this.disabled 等都替换成 false</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 则对应逻辑分支会被消除</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">PartialEvaluator</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  components</span><span style="color:#999999;--shiki-dark:#666666">: {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    Tag</span><span style="color:#999999;--shiki-dark:#666666">: {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      disabled</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#1E754F;--shiki-dark:#4D9375">false</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      checkable</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#1E754F;--shiki-dark:#4D9375">false</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      closable</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#1E754F;--shiki-dark:#4D9375">false</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span></code></pre>
<p>比如若引入了一个第三方 Tag 组件，只需要样式而不需要使用它提供的「关闭 Tag」，「选择 Tag」，「禁用 Tag」等功能，就如上配置。</p>
