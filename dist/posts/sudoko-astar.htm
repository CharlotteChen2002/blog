<p>接上一篇博客：<a href="http://home.ustc.edu.cn/~liuly0322/blog/2021/06/03/sudoko-iddfs/" target="_blank" rel="noopener">数独的模拟逻辑解法的实现</a>，本篇博客将介绍数独的 A* 算法求解。</p>
<h2 id="a*-%E7%AE%97%E6%B3%95" tabindex="-1">A* 算法</h2>
<h3 id="%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90" tabindex="-1">原理分析</h3>
<p>A* 算法是游戏中寻找路径的一种常见解法，它能在保证找到最短路径的同时，以一种较为节省计算资源开销的方式达到这一目的。关于理论分析，可以见斯坦福计算机系写的一篇 <a href="https://blog.csdn.net/denghecsdn/article/details/78778769" target="_blank" rel="noopener">算法介绍</a>，或者见它的 <a href="https://dev.gameres.com/Program/Abstract/Arithmetic/AmitAStar.mht" target="_blank" rel="noopener">中文译文</a>，这个网页似乎有点兼容性问题，所以你也可以查看 <a href="https://blog.csdn.net/b2b160/article/details/4057781" target="_blank" rel="noopener">csdn 的转载</a>。</p>
<!-- more -->
<p><s>大概只有在这个时候我才能感觉到中文互联网 csdn 无限套娃的一点好处</s></p>
<p>概括一点来说，A* 算法结合了 <strong>Dijkstra 算法</strong> 和 <strong>最佳优先搜索算法</strong> 的优点。二者都从普通的广度优先搜索演化而来，其中前者是按照离起始点的有权路径距离来进行搜索的，能确保找到最短路径，而后者采取了贪心策略，估计了当前点和目标点的距离，一般能较快的找到终点。这种贪心策略被称为 <strong>启发式方法</strong>。</p>
<p>可以认为，Dijkstra 算法按照点的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 值作为依据进行搜索，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 是距离原点距离（可以带权）。</p>
<p>而最佳优先搜索算法按照点的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 值作为搜索依据，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 是从结点到目标点的距离（只能估计）。</p>
<p>而 A* 算法就是对这二者进行综合，它进行搜索的依据是点的 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=g(n)+h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 值。这样一来，可以在保证找到最短路径的同时尽可能减少计算开销。</p>
<p>以上，在进行寻路算法时，我们使用了 <strong>距离</strong>一词，由于不同结点之间的“距离”可能是不同的，也就是这些点可以被抽象成有权图，因此，有时，也会使用用 <strong>代价</strong> 一词来表示有权的距离。此外，对于简单的二维平面迷宫问题，选取 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=g(n)+h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 是既合理又比较快速的，但是更一般情况，只需要 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 与 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 都具有正相关性即可，根据 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 的权重的大小，A* 算法会表现出结果更精准或运算更快，也就是更向 Dijkstra 算法或最佳优先搜索算法退化的特性。</p>
<h3 id="%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0" tabindex="-1">具体实现</h3>
<p>这里引用 Red Blob Games<a href="https://www.redblobgames.com/pathfinding/a-star/introduction.html" target="_blank" rel="noopener">这篇文章</a> 里的 Python 代码（<s>为什么，因为他写的实在是太好了</s>）。</p>
<p>顺便一提，作者的博客有很多很有意思的可视化内容，有兴趣可以自己去玩玩。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-python"><span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">frontier </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> PriorityQueue</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">frontier</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">put</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">start</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">came_from </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#998418;--shiki-dark:#B8A965"> dict</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cost_so_far </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#998418;--shiki-dark:#B8A965"> dict</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">came_from</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">start</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> None</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cost_so_far</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">start</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">while</span><span style="color:#AB5959;--shiki-dark:#CB7676"> not</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> frontier</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">empty</span><span style="color:#999999;--shiki-dark:#666666">():</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">   current </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> frontier</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">get</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">   if</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> current </span><span style="color:#AB5959;--shiki-dark:#CB7676">==</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> goal</span><span style="color:#999999;--shiki-dark:#666666">:</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">   for</span><span style="color:#998418;--shiki-dark:#B8A965"> next</span><span style="color:#1E754F;--shiki-dark:#4D9375"> in</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> graph</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">neighbors</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">current</span><span style="color:#999999;--shiki-dark:#666666">):</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">      new_cost </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cost_so_far</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">current</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> graph</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cost</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">current</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> next</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      if</span><span style="color:#998418;--shiki-dark:#B8A965"> next</span><span style="color:#AB5959;--shiki-dark:#CB7676"> not</span><span style="color:#AB5959;--shiki-dark:#CB7676"> in</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cost_so_far </span><span style="color:#AB5959;--shiki-dark:#CB7676">or</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> new_cost </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cost_so_far</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#998418;--shiki-dark:#B8A965">next</span><span style="color:#999999;--shiki-dark:#666666">]:</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">         cost_so_far</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#998418;--shiki-dark:#B8A965">next</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> new_cost</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">         priority </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> new_cost </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> heuristic</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">goal</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> next</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">         frontier</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">put</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#998418;--shiki-dark:#B8A965">next</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> priority</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">         came_from</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#998418;--shiki-dark:#B8A965">next</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> current</span></span></code></pre>
<p>虽然笔者的大作业打算用 C++ 完成，<s>但是这种简单易懂的 Python 代码还是爱了爱了</s>。这里用 cost_so_far 表明起点到当前点的代价，用 priority 表示当前点到终点的代价。frontier 是一个优先队列，如果不明白为什么叫 frontier 可以自行脑补一下朴素宽度优先搜索算法的遍历过程。</p>
<p>代码实现有一句需要比较注意：<code>if next not in cost_so_far or new_cost &lt; cost_so_far[next]:</code>，访问过的点不应该再次访问，除非再次到达这一点时所用代价降低了。</p>
<h2 id="%E6%95%B0%E7%8B%AC%E6%B1%82%E8%A7%A3%E4%B8%AD-a*-%E7%AE%97%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8" tabindex="-1">数独求解中 A* 算法的应用</h2>
<h3 id="%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90" tabindex="-1">问题分析</h3>
<p>要想利用 A* 算法求解数独，首先需要能把数独的求结过程抽象成图上的一个个结点。不妨认为数独的每个状态都是一个结点，那么这些结点具有以下几个特点：</p>
<ol>
<li>单向性：永远是填入 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></eq> 个数字的指向填入 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq> 个数字的结点。</li>
<li>层次性：由填入数字的个数可以对结点进行分层。</li>
<li>每个结点所连接的结点数目是很大的。</li>
</ol>
<p>对于第三条特别考虑，这意味着算法实现时必须考虑剪枝，否则占用的时间，空间都会很大。而正因为数独具有第二条所示的层次性，我们做下列考虑：</p>
<p>假设数独有解，初始给定 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></eq> 个数字，那么对于一个可行的解法，考虑数字放入先后顺序，一定对应一条从第 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></eq> 层一直到第 81 层的路径，但如果不考虑数字放入先后顺序，那么一共应该有 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>81</mn><mo>−</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">(81-n)!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">81</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)!</span></span></span></span></eq> 条路径。我们只关心数独的解，所以希望将这些路径归一。在数学上，这有个很好的解释：假设我们每一层都指定一个格子，这一层只能在这个格子放数字，那么刚好就指定了一条特定的路径，且这样做应该是不重复不遗漏。下面就要考虑每一层应该在哪个格子放入数字：这就涉及到了笔者 <a href="http://home.ustc.edu.cn/~liuly0322/blog/2021/06/03/sudoko-iddfs/" target="_blank" rel="noopener">上一篇博客</a> 的内容：每次选择当前可填入数字最少的格子填数字。</p>
<p>有了这个想法之后，我们来选择 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=g(n)+h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq>。在这个案例中，代价更应该作为计算资源的代价理解，而不是结点间距离，毕竟每一层结点间距离都是 1，不好作为判断依据。计算资源可以取每次选择的选择最少的结点的选择数。这代表了从一个结点出发，需要消耗多少资源（循环多少次，到达多少个新的结点，总之是这个意思）。</p>
<p>那么 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 的选择已经呼之欲出了。对于初始结点，取 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">g(n)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></eq>，对于结点 P，如果选择填入数字的格子有 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq> 个选择，那么对由这个选择到达的新的结点 Q，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>Q</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>P</mi><mo stretchy="false">)</mo><mo>+</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">g(Q)=g(P)+k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">Q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq>。</p>
<p>但是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 的选择我们只能近似做一个估计。这里不加证明的给出作者的一个估计式：设当前局面中，未填入数字的格子为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_1,a_2,...,a_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，每个格子有 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">b_1,b_2,...,b_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> 种填入数字的选择，可以考虑取 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mn>1</mn><mi>n</mi></msubsup><msub><mi>b</mi><mi>n</mi></msub><mi mathvariant="normal">/</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">h(n)=\sum\limits_1^n b_n/4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3185em;vertical-align:-0.9671em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1329em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9671em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/4</span></span></span></span></eq>。</p>
<h3 id="%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0" tabindex="-1">代码实现</h3>
<p>接下来就可以开始具体编写程序了。</p>
<p>先要编写一个类用于记录当前结点：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">public</span><span style="color:#999999;--shiki-dark:#666666">:</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    char</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">81</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    char</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">81</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    bool</span><span style="color:#B07D48;--shiki-dark:#BD976A"> mark</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">81</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#2F798A;--shiki-dark:#4C9A91">10</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cost_so_far</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cost_to_end</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cost</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num_now</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">    //当前一共多少数字</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    //运算符重载</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    friend</span><span style="color:#AB5959;--shiki-dark:#CB7676"> bool</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> operator</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">SudokuNode n1</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> SudokuNode n2</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> n1</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">cost</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ></span><span style="color:#B07D48;--shiki-dark:#BD976A"> n2</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">cost</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    //构造函数</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    SudokuNode</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    SudokuNode</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">char</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> src[]</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">9</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    //运算函数</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    static</span><span style="color:#AB5959;--shiki-dark:#CB7676"> void</span><span style="color:#59873A;--shiki-dark:#80A665"> mark_cell</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cell</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> bool*</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mark</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> char*</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> //标记 cell 可放数字</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#59873A;--shiki-dark:#80A665"> fill</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cell</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num_fill</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">    //填数，返回 0 代表无解</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    void</span><span style="color:#59873A;--shiki-dark:#80A665"> cal_cost</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> increase</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">    //计算 cost_to_end 和 cost 总</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    void</span><span style="color:#59873A;--shiki-dark:#80A665"> get_current_num</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">char</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> to_num[]</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">9</span><span style="color:#999999;--shiki-dark:#666666">]);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> //将当前结点信息输出</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>部分变量意义参见 <a href="http://home.ustc.edu.cn/~liuly0322/blog/2021/06/03/sudoko-iddfs/" target="_blank" rel="noopener">上一篇博客</a>。具体函数实现此处不表。</p>
<p>A* 搜索函数如下所示：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#59873A;--shiki-dark:#80A665"> Sudoku</span><span style="color:#999999;--shiki-dark:#666666">::</span><span style="color:#59873A;--shiki-dark:#80A665">search_astar</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    SudokuNode </span><span style="color:#59873A;--shiki-dark:#80A665">current</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">sudoku_num</span><span style="color:#999999;--shiki-dark:#666666">),</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> next</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    std</span><span style="color:#999999;--shiki-dark:#666666">::</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">priority_queue</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">SudokuNode</span><span style="color:#AB5959;--shiki-dark:#CB7676">></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> frontier</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    frontier</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">push</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">current</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">frontier</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">empty</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        current </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> frontier</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">top</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        frontier</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">pop</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">current</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">num_now</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ==</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 81</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            current</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">get_current_num</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">sudoku_solve</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            return</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 接下来需要遍历所有可能节点。由于相互的连通性，只要从最少可能的找即可</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> min </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 127</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> min_index</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 81</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">current</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> min</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	// 记录最小值</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">                min </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> current</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">num_can_put</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">                min_index </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 对这个格子生成所有可能的新节点，并加入优先队列</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">current</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">mark</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">min_index</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">                next </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> current</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">next</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">fill</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">min_index</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                    next</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">cal_cost</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">min</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                    frontier</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">push</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">next</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
