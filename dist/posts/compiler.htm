<p>大三上学期匆匆忙忙结束了。其实每个学期结束时都会有写一篇「生活类」博客进行总结的冲动，不过奈何实在笔力有限，因此还是写一篇「技术类」博客记录下这个学期干的事情。</p>
<p>这篇博客将介绍我和队友们在编译原理 H 课程中最终完成的课程项目，一个 SysYF 语言（C 语言子集）的编译器中的稀疏条件常量传播优化 Pass 以及项目的 WASM 展示界面构建。</p>
<p><img src="https://wakatime.com/badge/user/fa1fef10-45f2-488a-a2ee-13dace23f634/project/b17163f8-8821-43b4-84dd-6f822d788f88.svg" alt=""></p>
<p><em>我个人在该项目上花费时间。不确定图片会不会挂，总之目前是 119 小时。</em></p>
<!-- more -->
<p><img src="/images/SSSS.png" alt="SSSS" width="720" height="405"></p>
<p><em>这学期还看了很多番。安利《来自新世界》、《灵能百分百》，《斩服少女》，《SSSS.电光机王》。</em></p>
<h2 id="intro" tabindex="-1">Intro</h2>
<p>编译器的工作阶段大致可以分为词法分析、语法分析、中间代码生成、中间代码优化和代码生成。</p>
<p>本项目最终完成了三种中间代码优化（稀疏条件常量传播、公共子表达式删除和死代码消除）。本文主要介绍稀疏条件常量传播优化及 C++ Pass 实现，以及如何使用 WASM 构建一个优化结果展示界面。</p>
<p><img src="/images/image-20230207231446062.png" alt="image-20230207231446062" width="1896" height="954"></p>
<p><em><a href="https://liuly.moe/sysyf_compiler_codegen_opt/" target="_blank" rel="noopener">效果展示网页</a> | <a href="https://github.com/liuly0322/sysyf_compiler_codegen_opt" target="_blank" rel="noopener">GitHub 链接</a></em></p>
<p>简单起见，约定实现中只考虑一维数组，不考虑指针。因此对于数组定义 <code>int a[10]</code> 而言，<code>a + 1</code> 不是一个合法的运算。</p>
<h2 id="%E7%A8%80%E7%96%8F%E6%9D%A1%E4%BB%B6%E5%B8%B8%E9%87%8F%E4%BC%A0%E6%92%AD" tabindex="-1">稀疏条件常量传播</h2>
<p>「稀疏」指优化在 SSA 图上进行。而 LLVM IR 正是 SSA 形式。对于变量的定值引用关系而言，SSA 图更为稀疏（简单）。这也是在 SSA 图上进行优化的优势。</p>
<p>常量传播使用「格」这一代数结构辅助判断变量在某一点的定值（即某指令的值）是否为常数。</p>
<p>具体来说，首先把指令根据它的值分为三类状态：</p>
<ul>
<li>TOP：指令的值未初始化。</li>
<li>Constant：指令的值确定是某个常量。这是一类状态，包含了所有的常数。</li>
<li>BOT：指令的值确定是未知的。</li>
</ul>
<p>即下图所示：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-text"><span class="line"><span>   TOP</span></span>
<span class="line"><span> /  |   \</span></span>
<span class="line"><span>c1 c2 .. cn</span></span>
<span class="line"><span> \  |   /</span></span>
<span class="line"><span>   BOT</span></span></code></pre>
<p>「格」要求任意两个元素都有最大下界和最小上界，对应两个元素的交操作和并操作。</p>
<p>对于上述的格，交操作（求两个元素的最大下界）如下定义：</p>
<ul>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>O</mi><mi>P</mi><mo>∩</mo><mi>X</mi><mo>=</mo><mi>X</mi></mrow><annotation encoding="application/x-tex">TOP \cap X = X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">TOP</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span></eq></li>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>C</mi><mi>j</mi></msub><mo>=</mo><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i \cap C_j = C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq>，当 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><msub><mi>C</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">C_i = C_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq></li>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>∩</mo><msub><mi>C</mi><mi>j</mi></msub><mo>=</mo><mi>B</mi><mi>O</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">C_i \cap C_j = BOT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">BOT</span></span></span></span></eq>，当 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo mathvariant="normal">≠</mo><msub><mi>C</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">C_i \ne C_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></eq></li>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mi>O</mi><mi>T</mi><mo>∩</mo><mi>X</mi><mo>=</mo><mi>B</mi><mi>O</mi><mi>T</mi></mrow><annotation encoding="application/x-tex">BOT \cap X = BOT</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">BOT</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">BOT</span></span></span></span></eq></li>
</ul>
<p>这一代数结构的引入主要帮助我们判断 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span></eq> 指令的值。容易看出，<eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span></eq> 指令的状态即为它所有来源指令的值的状态的交。</p>
<p>此时，我们就可以写出一个简单的常量传播算法了。</p>
<p>初始时，所有指令的状态都被初始化为 TOP，而后向一个 <code>worklist</code> 中推入所有指令，并遍历：</p>
<ul>
<li>对于可以常量折叠的指令（一元/二元运算或比较指令，且操作数均为常数），将指令状态标记为 Constant</li>
<li>如果某个指令的状态发生变化，则所有用到该指令的指令都推入 <code>worklist</code>，重新计算状态</li>
</ul>
<p>由于指令状态变化一定是 TOP 到 BOT 的方向，因此至多只会变化两次（保证算法终止）。</p>
<p>上面的简单常量传播算法有一个缺陷：无法考虑到不可达控制流的影响。例如，考虑如下代码：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-c"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#59873A;--shiki-dark:#80A665"> main</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> result </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        result </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 2</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // result = phi(0, 2)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> result</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>这里 <code>result = 2</code> 的赋值不可能发生。但是上述算法无法识别，仍然会认为出口处的 <code>result</code> 是 BOT 状态。</p>
<p>因此，一个可行的改进如下：</p>
<ul>
<li>初始并不遍历所有指令，而是只遍历入口基本块的所有指令</li>
<li>额外增加 <code>cfg_worklist</code>，存储 <code>{pre_bb, bb}</code> 边（意味着 <code>bb</code> 由 <code>pre_bb</code> 可达）。每个基本块末尾如果是条件为常量的条件跳转语句，那么只用往 <code>cfg_worklist</code> 中推入一条边（而一般的条件跳转语句或无条件跳转语句需要推入所有可能的目的基本块）。</li>
<li><eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span></eq> 指令的状态是它所有 <strong>可达</strong> 来源的指令的状态的交。</li>
</ul>
<p>基本算法代码：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 初始只标记入口基本块可达</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">cfg_worklist</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">emplace_back</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#1E754F;--shiki-dark:#4D9375">nullptr</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> f</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">get_entry_block</span><span style="color:#999999;--shiki-dark:#666666">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 初始化为 TOP 状态</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 这里需要注意，函数参数和全局变量默认应该是 BOT 状态</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">auto</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">bb </span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> f</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">get_basic_blocks</span><span style="color:#999999;--shiki-dark:#666666">())</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">auto</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">expr </span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bb</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">get_instructions</span><span style="color:#999999;--shiki-dark:#666666">())</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        value_map</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">set</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">expr</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> {</span><span style="color:#59873A;--shiki-dark:#80A665">ValueStatus</span><span style="color:#999999;--shiki-dark:#666666">::</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">TOP}</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 维护两个队列</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">auto</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#AB5959;--shiki-dark:#CB7676">U</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">auto</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#AB5959;--shiki-dark:#CB7676">U</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cfg_worklist</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">size</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ssa_worklist</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">size</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cfg_worklist</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">size</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        auto</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">pre_bb</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> bb</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cfg_worklist</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 每条边只用遍历一遍</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 换句话说，只有新增的边才会触发遍历基本块全部指令</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">marked</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">count</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">{pre_bb</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> bb}</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            continue</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        marked</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">insert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">{pre_bb</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> bb}</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">auto</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inst </span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bb</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">get_instructions</span><span style="color:#999999;--shiki-dark:#666666">())</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            instruction_visitor</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">visit</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inst</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ssa_worklist</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">size</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        auto</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inst </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ssa_worklist</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        auto</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">bb </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> inst</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">get_parent</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 只有指令可达，才需要遍历</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // 否则可能引发不必要的状态更新</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">auto</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">pre_bb </span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bb</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">get_pre_basic_blocks</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">marked</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">count</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">{pre_bb</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> bb}</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                instruction_visitor</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">visit</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inst</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">                break</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 收尾工作，所有 CONST 状态的指令都替换为常数</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 并且对于条件为常量的条件跳转指令，改写为无条件跳转</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 这一改写主要是方便后续其他优化</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">replaceConstant</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">f</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p>指令的遍历：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> InstructionVisitor</span><span style="color:#999999;--shiki-dark:#666666">::</span><span style="color:#59873A;--shiki-dark:#80A665">visit</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Instruction</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#B07D48;--shiki-dark:#BD976A">inst</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    inst_ </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> inst</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    bb </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> inst</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">get_parent</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    prev_status </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> value_map</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">get</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inst</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    cur_status </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> prev_status</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">inst</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">is_phi</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        visit_phi</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">static_cast&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">PhiInst </span><span style="color:#AB5959;--shiki-dark:#CB7676">*></span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inst</span><span style="color:#999999;--shiki-dark:#666666">));</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#1E754F;--shiki-dark:#4D9375"> if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">inst</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">is_br</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        visit_br</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">static_cast&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">BranchInst </span><span style="color:#AB5959;--shiki-dark:#CB7676">*></span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inst</span><span style="color:#999999;--shiki-dark:#666666">));</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#1E754F;--shiki-dark:#4D9375"> if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">inst</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">is_binary</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#B07D48;--shiki-dark:#BD976A"> inst</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">is_unary</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        visit_foldable</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inst</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        cur_status </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#59873A;--shiki-dark:#80A665">ValueStatus</span><span style="color:#999999;--shiki-dark:#666666">::</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">BOT</span><span style="color:#999999;--shiki-dark:#666666">};</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cur_status </span><span style="color:#AB5959;--shiki-dark:#CB7676">!=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> prev_status</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        value_map</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">set</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">inst</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> cur_status</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">auto</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> use </span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> inst</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">get_use_list</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">            auto</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">use_inst </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#AB5959;--shiki-dark:#CB7676"> dynamic_cast&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">Instruction </span><span style="color:#AB5959;--shiki-dark:#CB7676">*></span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">use</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">val_</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            ssa_worklist</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">push_back</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">use_inst</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>这里 <code>visit_br</code> 会更新 <code>cfg_worklist</code>。<code>visit_phi</code> 和 <code>visit_foldable</code> 只需要计算指令新的状态即可。</p>
<h2 id="wasm" tabindex="-1">WASM</h2>
<h3 id="intro-1" tabindex="-1">Intro</h3>
<p>WASM。即 WebAssembly，简单来说就是一种虚拟机字节码格式。现在主流浏览器都已支持这种字节码的运行。我们都知道 JavaScript 在浏览器中的运行就是先编译到字节码再执行的，那么这种新的字节码格式又有什么好处呢？它最大的优势就在于格式简单，方便从别的语言编译到 WebAssembly。一方面，这允许其他语言的库或程序直接在浏览器环境中被运行而无需移植到 JavaScript；另一方面，由于编译过程不在浏览器中进行，因此编译时间对用户来说是无感的，可以在编译时启用级别较高的优化，节省运行时间。目前，C++ 和 Rust 都有比较良好的 WebAssembly 生态及社区支持。</p>
<h3 id="%E4%B8%8E-javascript-%E7%9A%84%E4%BA%A4%E4%BA%92" tabindex="-1">与 JavaScript 的交互</h3>
<p>WebAssembly 与 JavaScript 实际交互的都是 <code>i32</code> 类型的整数。超过 32 位的数据会被拆分为多个 <code>i32</code> 类型的整数表示；而 32 位的其他数据可以自行约定类型信息（例如约定作为指针，这样就可以传递字符串，数组等大数据了）。一旦涉及到指针，就要考虑到内存管理的问题了：一般而言，WebAssembly 和 JavaScript 的数据交互都发生在 WebAssembly 的堆区，这块内存 WebAssembly 和 JavaScript 都可以访问到。WebAssembly 可以暴露自己的 <code>malloc</code> 和 <code>free</code> 函数，方便 JavaScript 进行内存分配和销毁。</p>
<h3 id="%E4%B8%8E-cmake-%E9%A1%B9%E7%9B%AE" tabindex="-1">与 CMake 项目</h3>
<p>C++ 编译到 WebAssembly 一般依赖 <a href="https://emscripten.org/" target="_blank" rel="noopener">emscripten</a> 工具链。下面介绍本项目作为一个 CMake 项目如何移植到 WASM。</p>
<h4 id="%E6%9A%B4%E9%9C%B2%E6%8E%A5%E5%8F%A3" tabindex="-1">暴露接口</h4>
<p>根据需要约定即可。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">std</span><span style="color:#999999;--shiki-dark:#666666">::</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">string result</span><span style="color:#999999;--shiki-dark:#666666">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">extern</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">C</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#AB5959;--shiki-dark:#CB7676"> char</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#59873A;--shiki-dark:#80A665">compile</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#AB5959;--shiki-dark:#CB7676"> char</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#B07D48;--shiki-dark:#BD976A">str</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> sccp</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cse</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> dce</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    IRBuilder builder</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    SysYFDriver driver</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    std</span><span style="color:#999999;--shiki-dark:#666666">::</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">string filename</span><span style="color:#999999;--shiki-dark:#666666">{</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">tmp.sy</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">};</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // 标准库函数都可以使用。在浏览器运行时，这里使用的是内存文件系统</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    FILE </span><span style="color:#AB5959;--shiki-dark:#CB7676">*</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">fptr </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#59873A;--shiki-dark:#80A665"> fopen</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">filename</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">c_str</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> "</span><span style="color:#B56959;--shiki-dark:#C98A7D">w</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    fputs</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">str</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> fptr</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    fclose</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">fptr</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    auto</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">root </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> driver</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">parse</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">filename</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    root</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">accept</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">builder</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    auto</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> m </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> builder</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">getModule</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // 设置优化，略</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    ......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    passmgr</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">execute</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    m</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">set_print_name</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    result </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> m</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#59873A;--shiki-dark:#80A665">print</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // 返回指针</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> result</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">c_str</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p><code>extern &quot;C&quot;</code> 是为了防止 C++ 的 name mangling 造成无法根据函数名定位函数签名。</p>
<h4 id="cmake-%E6%96%87%E4%BB%B6" tabindex="-1">CMake 文件</h4>
<p>在原有基础上微调即可。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cmake"><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># 方便通过命令行参数指定构建目标</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">option</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">(BUILD_WASM </span><span style="color:#B56959;--shiki-dark:#C98A7D">"Build WASM output files"</span><span style="color:#1E754F;--shiki-dark:#4D9375"> OFF</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># 根据构建目标设定不同的优化等级</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">if</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">(BUILD_WASM)</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  # WASM with -Oz</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  set</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">CMAKE_CXX_FLAGS</span><span style="color:#B56959;--shiki-dark:#C98A7D"> "${CMAKE_CXX_FLAGS} -Oz -Wall -pedantic"</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">elseif</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">(</span><span style="color:#1E754F;--shiki-dark:#4D9375">NOT</span><span style="color:#B56959;--shiki-dark:#C98A7D"> "${CMAKE_BUILD_TYPE}"</span><span style="color:#1E754F;--shiki-dark:#4D9375"> MATCHES</span><span style="color:#B56959;--shiki-dark:#C98A7D"> "Debug"</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  # release mode with -O2</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  set</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">CMAKE_CXX_FLAGS</span><span style="color:#B56959;--shiki-dark:#C98A7D"> "${CMAKE_CXX_FLAGS} -O2 -Wall -pedantic"</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">else</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">()</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  # debug mode wich -O0 and -g</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  set</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">CMAKE_CXX_FLAGS</span><span style="color:#B56959;--shiki-dark:#C98A7D"> "${CMAKE_CXX_FLAGS} -O0 -Wall -g -pedantic"</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">endif</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">if</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">(BUILD_WASM)</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  # 指定目标：compiler.js</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  add_executable</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">(</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    compiler</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    ${CMAKE_CURRENT_SOURCE_DIR}</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">/src/wasm.cpp</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  )</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  # 重要：指定需要导出给 JavaScript 的函数</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  target_link_options(compiler </span><span style="color:#59873A;--shiki-dark:#80A665">PRIVATE</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> -sEXPORTED_FUNCTIONS=[_compile,_malloc,_free])</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  # 同普通 CMake，配置链接库</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  target_link_libraries</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">(</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    compiler</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    SysYFPass</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    SysYFIRBuilder</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    IRLib</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    Driver</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  )</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">endif</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">()</span></span></code></pre>
<p>核心有两处：</p>
<ul>
<li>配置优化等级。不开启优化会保留大量冗余代码。</li>
<li>设置导出函数。</li>
</ul>
<p>编译脚本：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-shell"><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">rm</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -rf</span><span style="color:#B56959;--shiki-dark:#C98A7D"> build</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">mkdir</span><span style="color:#B56959;--shiki-dark:#C98A7D"> build</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">cd</span><span style="color:#B56959;--shiki-dark:#C98A7D"> build</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">emcmake</span><span style="color:#B56959;--shiki-dark:#C98A7D"> cmake</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -DBUILD_WASM=ON</span><span style="color:#B56959;--shiki-dark:#C98A7D"> ..</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">emmake</span><span style="color:#B56959;--shiki-dark:#C98A7D"> make</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -j</span></span></code></pre>
<p>相比普通构建流程，用 <code>emcmake</code> 和 <code>emmake</code> 包装了 <code>cmake</code> 和 <code>make</code>。</p>
<p>值得一提的是，emscripten 官方提供了 docker 镜像方便命令的执行，无需下载安装依赖。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-shell"><span class="line"><span style="color:#998418;--shiki-dark:#B8A965">cd</span><span style="color:#B56959;--shiki-dark:#C98A7D"> SysYF_Pass_Student</span><span style="color:#999999;--shiki-dark:#666666"> &#x26;&#x26;</span><span style="color:#59873A;--shiki-dark:#80A665"> docker</span><span style="color:#B56959;--shiki-dark:#C98A7D"> run</span><span style="color:#A65E2B;--shiki-dark:#C99076"> \</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">    --rm</span><span style="color:#A65E2B;--shiki-dark:#C99076"> \</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">    -v</span><span style="color:#999999;--shiki-dark:#666666"> $(</span><span style="color:#998418;--shiki-dark:#B8A965">pwd</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B56959;--shiki-dark:#C98A7D">:/src</span><span style="color:#A65E2B;--shiki-dark:#C99076"> \</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">    -u</span><span style="color:#999999;--shiki-dark:#666666"> $(</span><span style="color:#59873A;--shiki-dark:#80A665">id</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -u</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B56959;--shiki-dark:#C98A7D">:</span><span style="color:#999999;--shiki-dark:#666666">$(</span><span style="color:#59873A;--shiki-dark:#80A665">id</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -g</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#A65E2B;--shiki-dark:#C99076"> \</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    emscripten/emsdk</span><span style="color:#A65E2B;--shiki-dark:#C99076"> \</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    sh</span><span style="color:#B56959;--shiki-dark:#C98A7D"> build_wasm.sh</span></span></code></pre>
<h4 id="javascript-%E4%BA%A4%E4%BA%92" tabindex="-1">JavaScript 交互</h4>
<p>核心逻辑很简单，JavaScript 在 WebAssembly 的堆区 malloc 一片空间，写入字符串，然后调用 <code>compile</code> 函数传入字符串指针编译，再根据返回的字符串指针作为编译结果，并 free 申请的空间。</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-javascript"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> compile</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">sccp</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cse</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> dce</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> str</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> document</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">getElementById</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#B56959;--shiki-dark:#C98A7D">sy_code</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">).</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // malloc 并写入</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> strBuffer</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> TextEncoder</span><span style="color:#999999;--shiki-dark:#666666">().</span><span style="color:#59873A;--shiki-dark:#80A665">encode</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">str</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> strPointer</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Module</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">_malloc</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">strBuffer</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">length</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  Module</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">HEAPU8</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">set</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">strBuffer</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> strPointer</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  Module</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">HEAPU8</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">strPointer</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B07D48;--shiki-dark:#BD976A"> strBuffer</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">length</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // 编译结果</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> outPointer</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Module</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">_compile</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">strPointer</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> sccp</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cse</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> dce</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // free 申请的空间</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  Module</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">_free</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">strPointer</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // 实用函数，整合在了 compiler.js 中</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // https://emscripten.org/docs/api_reference/preamble.js.html</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#59873A;--shiki-dark:#80A665"> UTF8ToString</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">outPointer</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>这样就移植好了。</p>
