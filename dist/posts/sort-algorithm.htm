<p>本文将简要介绍各种排序算法。</p>
<h2 id="%E7%AE%80%E4%BB%8B" tabindex="-1">简介</h2>
<blockquote>
<p><strong>排序算法</strong>（英语：Sorting algorithm）是一种将一组特定的数据按某种顺序进行排列的算法。</p>
</blockquote>
<h2 id="%E6%80%A7%E8%B4%A8" tabindex="-1">性质</h2>
<h3 id="%E7%A8%B3%E5%AE%9A%E6%80%A7" tabindex="-1">稳定性</h3>
<p>定义：如果一个排序算法能保证两个相等的数，经过排序之后，其在序列的前后位置顺序不变，那么这个排序算法就具有稳定性。</p>
<p>当要排序的内容是一个复杂对象的多个数字属性，且其原本的初始顺序存在意义时，排序算法的稳定性将会发挥作用。</p>
<!-- more -->
<p>例如：</p>
<blockquote>
<p>公司想根据“能力”和“资历”（以进入公司先后顺序为标准）作为本次提拔的参考，假设 A 和 B 能力相当，如果是稳定性排序，则第一次根据“能力”排序之后，就不需要第二次根据“资历”排序了，因为“资历”排序就是员工插入员工表的顺序。如果是不稳定排序，则需要第二次排序，会增加系统开销。</p>
</blockquote>
<p>这种情况还是比较常见的。在后文介绍基数排序时也可以看到这一性质的应用。</p>
<p>基数排序、计数排序、插入排序、冒泡排序、归并排序等是稳定排序。</p>
<p>选择排序、堆排序、快速排序、希尔排序等不是稳定排序。</p>
<h3 id="%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" tabindex="-1">时间复杂度</h3>
<p>假设需要排序的数据有 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></eq> 个。可以给出一个结论：基于比较的排序算法具有时间复杂度的下限： <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。</p>
<p>这里说一个排序算法基于比较，是指排序过程中，需要通过数据两两比较大小，决定他们的顺序。</p>
<p>一个直观的证明是这样的：在 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></eq> 个数字未排序之前，它们互相的大小关系一共有 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span></eq> 种可能。我们称这些可能的全体为一个状态空间，最理想的情况，每次比较都可以使状态空间剩余的状态数减半（这里可以类比给定一个整数在一个区间内，猜测这个整数是什么的问题（允许询问整数是不是在某一区间），最好的决策应该是每次二分查找（这里直接运用了这个经验结论，当然这是可以被证明的，不过这与本文关系不大），而不是询问长度为总长 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></eq> 的区间）。</p>
<p>在这种策略下，一共需要比较 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\log_2(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!)</span></span></span></span></eq> 次。根据斯特林公式（阶乘的近似估计式）， <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo><mo>=</mo><msqrt><mrow><mn>2</mn><mi>π</mi><mi>n</mi></mrow></msqrt><mo stretchy="false">(</mo><mfrac><mi>n</mi><mi>e</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">n!=\sqrt{2\pi n}(\frac{n}{e})^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2522em;vertical-align:-0.345em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9072em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord mathnormal">πn</span></span></span><span style="top:-2.8672em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1328em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></eq> ，故 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\log_2(n!)=\Theta(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> ，这也就是基于比较的排序算法的（平均）复杂度下限。一些基于比较的排序算法的时间复杂度可以在特殊情况下达到 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 这一天然下限，比如对于一个已经排列好的序列采用冒泡排序（实现细节见下文）。但这从一个决策角度而言并不是高明的：比如说，对于一个排序好的数组 <code>a[n]</code> ，这里下标从 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></eq> 到 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></eq> ，在前 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></eq> 次比较后，我们可以得知： <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>≤</mo><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>≤</mo><mo>⋯</mo><mo>≤</mo><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[1]\le a[2] \le \cdots \le a[n-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></eq> ，就得知的信息而言，此时状态空间还剩余 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></eq> 种可能（ <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span></eq> 可以在任意位置），但此时冒泡排序的策略相当于在赌 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span></eq> 位于最后一位，所以仅仅对于这个特例，冒泡排序会有比较好的时间复杂度表现（恰好赌对了）（前 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n-2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></eq> 次比较过程中也是类似的，不过不像最后一次这么直观）。</p>
<p>下面将介绍一些常用或经典的排序算法。</p>
<h2 id="%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" tabindex="-1">基础排序算法</h2>
<p>这里将介绍比较常见的几种排序算法：冒泡排序，选择排序，插入排序，快速排序和归并排序。</p>
<h3 id="%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F" tabindex="-1">冒泡排序</h3>
<blockquote>
<p>冒泡排序（英语：Bubble sort）是一种简单的排序算法。由于在算法的执行过程中，较小的元素像是气泡般慢慢「浮」到数列的顶端，故叫做冒泡排序。</p>
</blockquote>
<h4 id="%E5%8E%9F%E7%90%86" tabindex="-1">原理</h4>
<p>冒泡排序是最直观的基于比较的排序算法。策略是依次比较两个相邻的元素，如果逆序就交换。当整个序列中没有逆序的元素（没有发生交换），那么排序就完成了。否则重新遍历这一序列。</p>
<h4 id="%E5%AE%9E%E7%8E%B0" tabindex="-1">实现</h4>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> bubble_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> n</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">bool</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> sorted </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#1E754F;--shiki-dark:#4D9375"> false</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> sorted </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">sorted</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">			if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ></span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">				swap</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">				sorted </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#1E754F;--shiki-dark:#4D9375"> false</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">			}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p><s>所以说 cpp 真的好自由</s></p>
<p>这里通过 <code>sorted</code> 记录本次遍历是否完成排序。</p>
<p>每次遍历后会依次从后确定最大的数、第二大的数，此后就不需要再比较这些数了，所以这个过程中有 <code>n--</code></p>
<h4 id="%E6%80%A7%E8%B4%A8-1" tabindex="-1">性质</h4>
<p>冒泡排序是一种稳定的排序算法。</p>
<p>平均和最坏时间复杂度均为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> ，最优时间复杂度（序列已经有序时）为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。</p>
<h3 id="%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" tabindex="-1">选择排序</h3>
<h4 id="%E5%8E%9F%E7%90%86-1" tabindex="-1">原理</h4>
<p>每次找出第 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></eq> 小的元素，再与数组第 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></eq> 位交换。</p>
<h4 id="%E5%AE%9E%E7%8E%B0-1" tabindex="-1">实现</h4>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> selection_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> n</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> ith </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ++</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ith</span><span style="color:#999999;--shiki-dark:#666666">])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        ith </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    swap</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ith</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h4 id="%E6%80%A7%E8%B4%A8-2" tabindex="-1">性质</h4>
<p>由于随意的交换元素，选择排序不是一种稳定的排序算法。</p>
<p>最优时间复杂度、平均时间复杂度和最坏时间复杂度均为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 。</p>
<h3 id="%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F" tabindex="-1">插入排序</h3>
<blockquote>
<p>插入排序（英语：Insertion sort）是一种简单直观的排序算法。它的工作原理为将待排列元素划分为“已排序”和“未排序”两部分，每次从“未排序的”元素中选择一个插入到“已排序的”元素中的正确位置。</p>
</blockquote>
<h4 id="%E5%AE%9E%E7%8E%B0-2" tabindex="-1">实现</h4>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> insertion_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> n</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> key </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j </span><span style="color:#AB5959;--shiki-dark:#CB7676">>=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;&#x26;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> key</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">            j</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> key</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h4 id="%E6%80%A7%E8%B4%A8-3" tabindex="-1">性质</h4>
<p>插入排序是一种稳定的排序算法。</p>
<p>平均和最坏时间复杂度均为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> ，最优时间复杂度（序列已经有序时）为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。</p>
<h3 id="%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" tabindex="-1">快速排序</h3>
<h4 id="%E5%8E%9F%E7%90%86-2" tabindex="-1">原理</h4>
<p>每次选择一个数作为基准，通过交换使得数组前半部分小于（等于）这个数，后半部分大于（等于）这个数，随后分别对这两部分快速排序，数组就排序完了。</p>
<p>可以看到，这一过程很适合用递归编写。递归中止条件是当前仅一个数。</p>
<h4 id="%E5%AE%9E%E7%8E%B0-3" tabindex="-1">实现</h4>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> quick_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> length</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">length </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375"> return</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> length </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mark </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">length </span><span style="color:#AB5959;--shiki-dark:#CB7676">/</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 2</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mark</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mark</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i </span><span style="color:#AB5959;--shiki-dark:#CB7676">></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375"> break</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">		swap</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]);</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	}</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">	quick_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">	quick_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> length </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	return</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>具体实现有很多种方式，但实质相同，都是将数列划分为两部分（保证相对大小关系），再快速排序这两部分。</p>
<p>本实现的 <code>mark</code> 即为每次的基准数，这里选取了每次数组的中间项，以避免特殊数据情况（如升序序列或降序序列）的干扰。</p>
<h4 id="%E6%80%A7%E8%B4%A8-4" tabindex="-1">性质</h4>
<p>快速排序不是一种稳定的排序算法。</p>
<p>最优时间复杂度和平均时间复杂度为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> ，最坏时间复杂度视实际情况可能退化到 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> 。</p>
<h4 id="%E5%BA%94%E7%94%A8" tabindex="-1">应用</h4>
<p>快速排序这种分治的思想在解决别的问题时也可以用到。如：<a href="https://www.luogu.com.cn/problem/P1923" target="_blank" rel="noopener">P1923 求第 k 小的数 - 洛谷</a></p>
<p>将快速排序的函数稍作改变：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#999999;--shiki-dark:#666666">#</span><span style="color:#1E754F;--shiki-dark:#4D9375">include</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">iostream</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">></span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">#</span><span style="color:#1E754F;--shiki-dark:#4D9375">include</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x3C;</span><span style="color:#B56959;--shiki-dark:#C98A7D">cstdio</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">></span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">using</span><span style="color:#AB5959;--shiki-dark:#CB7676"> namespace</span><span style="color:#59873A;--shiki-dark:#80A665"> std</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#59873A;--shiki-dark:#80A665"> nth_num</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> length</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> target</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">length </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375"> return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> length </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mark </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">length </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mark</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mark</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i </span><span style="color:#AB5959;--shiki-dark:#CB7676">></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375"> break</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">		swap</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]);</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	}</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">target </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		return</span><span style="color:#59873A;--shiki-dark:#80A665"> nth_num</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> target</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#1E754F;--shiki-dark:#4D9375"> if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">target </span><span style="color:#AB5959;--shiki-dark:#CB7676">></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		return</span><span style="color:#59873A;--shiki-dark:#80A665"> nth_num</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> length </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> target </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	}</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">target </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#59873A;--shiki-dark:#80A665"> main</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">50</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">	cin </span><span style="color:#AB5959;--shiki-dark:#CB7676">>></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n </span><span style="color:#AB5959;--shiki-dark:#CB7676">>></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">		scanf</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#A65E2B;--shiki-dark:#C99076">%d</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">"</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	}</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">	cout </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;&#x3C;</span><span style="color:#59873A;--shiki-dark:#80A665"> nth_num</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">a</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> k </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>通过分治，每次把问题的规模缩减到原来的一半，在这一半中继续找所求的数。时间复杂度 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。</p>
<h3 id="%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" tabindex="-1">归并排序</h3>
<h4 id="%E5%8E%9F%E7%90%86-3" tabindex="-1">原理</h4>
<p>与快速排序类似，归并排序也采用了分治的思想。具体来说，归并排序先将数列划分为两部分，再分别对两部分归并排序，得到两个有序的数列，最后再合并两个数列即可。</p>
<p>不难发现，归并排序同样也很适合用递归实现。终止条件同样是当前仅有一个数。</p>
<h4 id="%E5%AE%9E%E7%8E%B0-4" tabindex="-1">实现</h4>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> merge_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> length</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	static</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> t</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">100000</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//需要重复使用</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">length </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375"> return</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mid </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> length </span><span style="color:#AB5959;--shiki-dark:#CB7676">/</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 2</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">	merge_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mid</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//下标从 0 到 mid - 1</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">	merge_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">num </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mid</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> length </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mid</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> left </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> right </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mid</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> ans </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	while</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ans </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> length</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">		if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">left </span><span style="color:#AB5959;--shiki-dark:#CB7676">>=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> mid </span><span style="color:#AB5959;--shiki-dark:#CB7676">||</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">right </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> length </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x26;&#x26;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">left</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ></span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">right</span><span style="color:#999999;--shiki-dark:#666666">]))</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">			t</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ans</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">right</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">            // res += mid - left;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">		}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">			t</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">ans</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">left</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">		}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	}</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> length</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> t</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h4 id="%E6%80%A7%E8%B4%A8-5" tabindex="-1">性质</h4>
<p>归并排序是一种稳定的排序算法。</p>
<p>最优时间复杂度、平均时间复杂度和最坏时间复杂度均为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。</p>
<h4 id="%E5%BA%94%E7%94%A8-1" tabindex="-1">应用</h4>
<p>可以用于统计数组的逆序数。所谓逆序数，就是指一个数组中满足 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i&lt;j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span></eq> 且 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i]&gt;a[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></eq> 的数对 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></eq> 的组数。</p>
<p>事实上，原代码里注释的 <code>res += mid - left;</code> 就是在统计逆序数。原理如下：</p>
<p>由于归并排序划分的两部分的数彼此之间不改变位置，所以总的逆序数相当于：左半部分逆序数 + 右半部分逆序数 + 左右部分之间逆序对数。</p>
<p>其中，左半部分逆序数和右半部分逆序数自然是原问题的子问题，所以交给递归即可。</p>
<p>剩下的就在于如何统计左右部分之间的逆序对数。在合并左右两个有序数列过程中，如果整个数列有序，没有逆序数，那么应该一直是左半部分填入 <code>t</code> 数组；反之，在统计逆序数时，只需要考虑那些“提前”填入的右半部分数字即可。对于这些数而言，它们都各自会和尚未填入的左半部分数形成逆序。左半部分数一共有 <code>mid</code> 个，已经填入 <code>left</code> 个，那么自然只需要 <code>res += mid - left;</code> 即可。</p>
<p>这种统计逆序数的方式的复杂度与原归并排序相同，均为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。</p>
<h2 id="%E4%B8%8D%E5%9F%BA%E4%BA%8E%E6%AF%94%E8%BE%83%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" tabindex="-1">不基于比较的排序算法</h2>
<p>这里将介绍计数排序，基数排序，桶排序这些不基于比较的排序算法。这些排序算法的时间复杂度不受基于比较的排序算法的下限 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 的限制，但一般会牺牲更多的空间。</p>
<h3 id="%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F" tabindex="-1">计数排序</h3>
<h4 id="%E5%8E%9F%E7%90%86-4" tabindex="-1">原理</h4>
<p>计数排序的基本思路是统计每个数出现的次数，再根据这一信息还原出正确的排序。</p>
<p>具体实现上，为了统计每个数出现的次数，需要开一个大小为需要统计的数组的值域的数组，初始置值为 0，然后统计每个数出现的次数，最后再还原即可。</p>
<h4 id="%E5%AE%9E%E7%8E%B0-5" tabindex="-1">实现</h4>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> f</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1000</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666"> };</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//值域</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> t</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    cin </span><span style="color:#AB5959;--shiki-dark:#CB7676">>></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> t</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    f</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">t</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1000</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> f</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        cout </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;&#x3C;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>这是最直观的 &quot;计数&quot; 排序，但不是一般意义上的计数排序。一般意义上的计数排序需要满足能对具有多个属性的对象排序，所以在最后还原的步骤会有所差别。</p>
<p>具体来说，还需要对 <code>f</code> 数组求前缀和，这样一来 <code>f[i]</code> 的意义就变成了值为 <code>i</code> 的数最后能排到多少位（如果存在的话），接下来倒着对对象数组遍历，根据对象所对应的值的 <code>f[i]</code> 值，决定这个对象排在 <code>f[i]</code> 位。之后 <code>f[i]--</code> ，等待下一个对象。之所以倒着对数组遍历，是为了使计数排序具有稳定性。</p>
<p>于是可以写出对应的代码：</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">W</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#999999;--shiki-dark:#666666">};</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//W 是值域</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> counting_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> n</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> w</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//当前个数，当前值域</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> t</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">N</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//暂存排序结果，N 是最大个数</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ++</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ++</span><span style="color:#B07D48;--shiki-dark:#BD976A">cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//计数</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> w</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ++</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//前缀和</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">>=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> --</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B07D48;--shiki-dark:#BD976A"> t</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#B07D48;--shiki-dark:#BD976A">cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]]]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//倒序遍历</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ++</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> t</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//复制</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h4 id="%E6%80%A7%E8%B4%A8-6" tabindex="-1">性质</h4>
<p>计数排序是一种稳定的排序算法。</p>
<p>计数排序的时间复杂度为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>w</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span></eq> 。其中 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span></eq> 是值域大小。</p>
<h4 id="map" tabindex="-1">MAP</h4>
<p>这里介绍一下通过 <code>stl</code> 中 <code>map</code> 计数实现排序的算法。</p>
<p>不过由于 <code>map</code> 查找效率是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 的，所以时间复杂度至少是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> ，感觉最大的好处是<s>写起来特别简单</s>（逃）</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">map</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;int</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> f</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> t</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    cin </span><span style="color:#AB5959;--shiki-dark:#CB7676">>></span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> t</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    f</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">t</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">auto</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> f</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">begin</span><span style="color:#999999;--shiki-dark:#666666">();</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">!=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> f</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">end</span><span style="color:#999999;--shiki-dark:#666666">();</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> i</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">second</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        cout </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> i</span><span style="color:#999999;--shiki-dark:#666666">-></span><span style="color:#B07D48;--shiki-dark:#BD976A">first</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;&#x3C;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> '</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h3 id="%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F" tabindex="-1">基数排序</h3>
<h4 id="%E5%8E%9F%E7%90%86-5" tabindex="-1">原理</h4>
<p><img src="/images/xb5ks5.png" alt="基数排序" width="472" height="219"></p>
<p>为了理解基数排序，可以先在脑中模拟一下字典序：apple 和 absent 开头都是 a，因此都会排在 banana 前面，而 apple 和 absent 之间则需要进一步比较第二位，b 在 p 前面，所以 absent 也就排在 apple 前面。对这个过程进行分析，我们会发现，就决定单词间顺序而言，各个字母的重要程度由第一个字母向最后一个字母递降。那么，假设我们有一种 <strong>稳定</strong> 的排序算法，以每个字母为依据，从最后一个字母一直到第一个字母，每次都进行一遍稳定排序，最终结果自然是一个排好序的数列。（因为若两个单词第一位不同，那么显然第一位小的在前面，符合要求；若第一位相同，则由 <strong>内部排序稳定性</strong> ，第二位小的单词在前面，以此类推）。</p>
<p>而基数排序，就是在将待排序数据拆分成一个个“关键字” ，然后依上面所说的字典序的原理排序。</p>
<p>很显然，如果待排序数据是正整数，拆分是容易进行的：按照某一进制下的位数进行拆分即可。但对于负整数，基数排序就无法直接进行排序了。这个时候可以考虑做个转换，比如假设数据值域是 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mi>a</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-a,a]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">]</span></span></span></span></eq> ，可以先考虑把数据统一加上 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq> ，映射到 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mi>a</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,2a]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mord mathnormal">a</span><span class="mclose">]</span></span></span></span></eq> ，再进行排序。</p>
<p>下面以正整数排序为例，给出基数排序的一个示例。</p>
<h4 id="%E5%AE%9E%E7%8E%B0-6" tabindex="-1">实现</h4>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">struct</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> NUMBER</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//int 四个字节，不妨用 4 个 char 存储一个 int</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    unsigned</span><span style="color:#AB5959;--shiki-dark:#CB7676"> char</span><span style="color:#B07D48;--shiki-dark:#BD976A"> key</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">4</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> radix_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> n</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//注意：此实现仅排序正整数</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    NUMBER</span><span style="color:#AB5959;--shiki-dark:#CB7676">*</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#B07D48;--shiki-dark:#BD976A"> NUMBER</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">n</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    NUMBER</span><span style="color:#AB5959;--shiki-dark:#CB7676">*</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> temp </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#B07D48;--shiki-dark:#BD976A"> NUMBER</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">n</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 4</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">])</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#B07D48;--shiki-dark:#BD976A">key</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x26;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 255</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> >>=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 8</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">            else</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">                num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#B07D48;--shiki-dark:#BD976A">key</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    //依次对四个位置进行计数排序</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">256</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 4</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        memset</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cnt</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> sizeof</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">cnt</span><span style="color:#999999;--shiki-dark:#666666">));</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#B07D48;--shiki-dark:#BD976A">key</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]]</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">  //计数</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 256</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">  //前缀和</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n </span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">>=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            temp</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#AB5959;--shiki-dark:#CB7676">--</span><span style="color:#B07D48;--shiki-dark:#BD976A">cnt</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#B07D48;--shiki-dark:#BD976A">key</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]]]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">  //倒序遍历</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> temp</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">];</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">  //复制</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">	//还原到原数组</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#B07D48;--shiki-dark:#BD976A">key</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#B07D48;--shiki-dark:#BD976A">key</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 8</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#B07D48;--shiki-dark:#BD976A">key</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">2</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 16</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">num</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#B07D48;--shiki-dark:#BD976A">key</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">3</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &#x3C;&#x3C;</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 24</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    delete[]</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> num</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    delete[]</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> temp</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>此处内部排序选用计数排序完成。由上文，这是一种稳定的排序算法。</p>
<h4 id="%E6%80%A7%E8%B4%A8-7" tabindex="-1">性质</h4>
<p>基数排序是一种稳定的排序算法。</p>
<p>考虑以计数排序为内部排序算法的基数排序实现，此时假设待排序元素被拆分成了 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq> 个部分，每个部分值域为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></eq> ， <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">1 \le i \le k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq> ，那么基数排序的时间复杂度为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mi>n</mi><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(kn+\sum\limits_{i=1}^n\omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">kn</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.3291em;vertical-align:-0.9777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></eq> ，空间复杂度为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k+n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。可以看出，当每一部分值域比较小时，基数排序时间复杂度近似为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> ，优于基于比较的排序算法：根据实际测试，以上的具体实现中对正整数排序的案例， <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n=10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></eq> 规模时，基数排序所需时间几乎只有快速排序需要时间的一半。当然代价是需要消耗一些额外的存储空间。</p>
<p>若是每一部分的值域很大，则此时可以考虑直接使用快速排序等算法，基本无需考虑基数排序了。</p>
<h3 id="%E6%A1%B6%E6%8E%92%E5%BA%8F" tabindex="-1">桶排序</h3>
<h4 id="%E5%8E%9F%E7%90%86-6" tabindex="-1">原理</h4>
<blockquote>
<p>桶排序（英文：Bucket sort）是排序算法的一种，适用于待排序数据值域较大但分布比较均匀的情况。</p>
</blockquote>
<p>当需要排序的数据分布比较均匀时，可以预先根据待排序数据的值域划分出若干个（假设有 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq> 个）桶，先把每个元素放入对应的桶中，再在每个桶的内部进行排序，最后合并。</p>
<p>这样做的好处是，入桶操作基本可以看成 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 的，而在那之后，只是每个桶内部的数据排序，桶与桶之间的数据不需要比较（排序）。</p>
<p>桶内部的排序有多种选择方式：可以选择插入排序，此时桶排序的平均时间复杂度为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+n^2/k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></eq> 。视 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq> 为自变量，可知 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq> 应尽可能大，则时间复杂度可以接近 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。最理想情况，每个桶内恰好只有一个元素，这个时候桶排序所做的事情就退化成了计数排序。</p>
<p>当然内部也可以选取别的排序算法，比如假设选取快速排序，则时间复杂度 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>⋅</mo><mi>O</mi><mo stretchy="false">(</mo><mfrac><mi>n</mi><mi>k</mi></mfrac><mi>log</mi><mo>⁡</mo><mfrac><mi>n</mi><mi>k</mi></mfrac><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mfrac><mi>n</mi><mi>k</mi></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k\cdot O(\frac{n}{k}\log\frac{n}{k})=O(n\log\frac{n}{k})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></eq> ，同理当 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq> 足够大时，时间复杂度可以看作 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。</p>
<h4 id="%E5%AE%9E%E7%8E%B0-7" tabindex="-1">实现</h4>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code class="language-cpp"><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> N </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 10000</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> w </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1000000000</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">void</span><span style="color:#59873A;--shiki-dark:#80A665"> bucket_sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">int*</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> int</span><span style="color:#B07D48;--shiki-dark:#BD976A"> n</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    vector</span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;int></span><span style="color:#B07D48;--shiki-dark:#BD976A"> bucket</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">N</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> bucket_size </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> w </span><span style="color:#AB5959;--shiki-dark:#CB7676">/</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> N </span><span style="color:#AB5959;--shiki-dark:#CB7676">+</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> n</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        bucket</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> /</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> bucket_size</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#59873A;--shiki-dark:#80A665">push_back</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> p </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> i </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> N</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ++</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">        sort</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">bucket</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#59873A;--shiki-dark:#80A665">begin</span><span style="color:#999999;--shiki-dark:#666666">(),</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bucket</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#59873A;--shiki-dark:#80A665">end</span><span style="color:#999999;--shiki-dark:#666666">());</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">int</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j </span><span style="color:#AB5959;--shiki-dark:#CB7676">&#x3C;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bucket</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#59873A;--shiki-dark:#80A665">size</span><span style="color:#999999;--shiki-dark:#666666">();</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> j</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">            a</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">p</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bucket</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">i</span><span style="color:#999999;--shiki-dark:#666666">][</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">j</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>其中 <code>N</code> 代表桶的总数，<code>w</code> 代表数据值域。</p>
<h4 id="%E6%80%A7%E8%B4%A8-8" tabindex="-1">性质</h4>
<blockquote>
<p>如果使用稳定的内层排序，并且将元素插入桶中时不改变元素间的相对顺序，那么桶排序就是一种稳定的排序算法。</p>
</blockquote>
<p>复杂度由具体内部排序算法实现决定。当桶足够多时，一般有最优复杂度和平均复杂度 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> 。最坏复杂度是内部排序算法的最坏复杂度（假设所有数据都进入了同一个桶内）。</p>
<h2 id="%E5%85%B6%E4%BB%96%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95" tabindex="-1">其他排序算法</h2>
<p>事实上除了上述列出的八种排序算法，还有一些排序算法也比较常见。</p>
<h3 id="%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F" tabindex="-1">希尔排序</h3>
<p>希尔排序是插入排序算法的改进。插入排序算法在对几乎已经排好序的数据操作时，效率很高，所以希尔排序主旨是要尽量在实行插入排序之前使数列几乎有序。</p>
<p>具体实现可以参考<a href="https://www.runoob.com/data-structures/shell-sort.html" target="_blank" rel="noopener">希尔排序 | 菜鸟教程 (runoob.com)</a></p>
<h3 id="%E5%A0%86%E6%8E%92%E5%BA%8F" tabindex="-1">堆排序</h3>
<p>简单来说就是二叉堆不断取堆顶（</p>
<p>和数据结构关系比较大，本文仅介绍一些堆排序的特点：</p>
<p>和快速排序相同，堆排序也是一种不稳定的排序算法。</p>
<p>但堆排序的最优时间复杂度、平均时间复杂度、最坏时间复杂度均为 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></eq> ，不会像快速排序那样受到特殊数据的针对。</p>
<p>此外，堆排序还有一个好处就是能比较方便的取出数组的前 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq> 大元素或前 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></eq> 小元素，而不需要完成整个排序。</p>
<p>但比较平均时间的话，堆排序普遍慢于快速排序，堆排序会产生一些重复的 / 无意义的比较，这可以联系文章开头一点信息论的内容，我们希望每次比较都提供尽可能多的信息，所以比如说假设已经比较过了 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>&lt;</mo><mi>b</mi><mo separator="true">,</mo><mi>b</mi><mo>&lt;</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a&lt;b,b&lt;c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></eq> ，我们就不会希望再比较 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span></eq> 和 <eq><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></eq> 。</p>
<blockquote>
<p>毫无疑问，对快速排序，病态的比较从来都不会发生，因为 b 就是递归中的那个中柱 pivot，b 的位置确定之后，a 和 c 所在的区间各自去排序，所以 a 和 c 再也不会做比较了。 <a href="https://www.zhihu.com/question/23873747/answer/327295185" target="_blank" rel="noopener">为什么在平均情况下快速排序比堆排序要优秀？ - 圆珠笔的回答</a></p>
</blockquote>
<p>从比较次数的意义上来说，快速排序会更为优秀。</p>
<p>此外还有 cache 的因素，参考：<a href="https://www.zhihu.com/question/23873747/answer/327295185" target="_blank" rel="noopener">为什么在平均情况下快速排序比堆排序要优秀？ - qinzp 的回答</a></p>
